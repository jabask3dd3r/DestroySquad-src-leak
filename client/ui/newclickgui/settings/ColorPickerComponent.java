/*
 * Decompiled with CFR 0.152.
 */
package org.Destroy.client.ui.newclickgui.settings;

import java.awt.Color;
import net.minecraft.client.gui.Gui;
import net.minecraft.client.renderer.BufferBuilder;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.Tessellator;
import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
import org.Destroy.client.helpers.render.RenderHelper;
import org.Destroy.client.helpers.render.rect.RectHelper;
import org.Destroy.client.settings.impl.ColorSetting;
import org.Destroy.client.ui.newclickgui.FeaturePanel;
import org.Destroy.client.ui.newclickgui.settings.Component;

public class ColorPickerComponent
extends Component {
    public static int heightOffset = 80;
    public static Tessellator tessellator = Tessellator.getInstance();
    public static BufferBuilder buffer = tessellator.getBuffer();
    private float hue;
    private float saturation;
    private float brightness;
    private float alpha;
    private boolean colorSelectorDragging;
    private boolean hueSelectorDragging;
    private boolean alphaSelectorDragging;

    public ColorPickerComponent(FeaturePanel \u0445LL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL, ColorSetting L\u0445L\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL) {
        ColorPickerComponent LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL;
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.featurePanel = \u0445LL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL;
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.setting = L\u0445L\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL;
        int \u0445\u0445L\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL = L\u0445L\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.getColorValue();
        float[] LL\u0445\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL = LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.getHSBFromColor(\u0445\u0445L\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL);
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.hue = LL\u0445\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL[0];
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.saturation = LL\u0445\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL[1];
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.brightness = LL\u0445\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL[2];
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.alpha = (float)(\u0445\u0445L\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL >> 24 & 0xFF) / 255.0f;
    }

    @Override
    public void drawScreen(int \u0445\u0445\u0445LLLLLLLL\u0445L, int \u0445LL\u0445LLLLLLL\u0445L) {
        ColorPickerComponent L\u0445\u0445LLLLLLLL\u0445L;
        int \u0445\u0445L\u0445LLLLLLL\u0445L = 0xFFFFFF;
        ColorPickerComponent.mc.circleregular.drawStringWithOutline(L\u0445\u0445LLLLLLLL\u0445L.setting.getName(), L\u0445\u0445LLLLLLLL\u0445L.x - 195.0f, L\u0445\u0445LLLLLLLL\u0445L.y + L\u0445\u0445LLLLLLLL\u0445L.height / 2.0f - (float)(ColorPickerComponent.mc.circleregular.getFontHeight() / 4), \u0445\u0445L\u0445LLLLLLL\u0445L);
        float \u0445\u0445LLLL\u0445\u0445\u0445\u0445\u0445LL = L\u0445\u0445LLLLLLLL\u0445L.x + 2.0f;
        float \u0445L\u0445LLL\u0445\u0445\u0445\u0445\u0445LL = L\u0445\u0445LLLLLLLL\u0445L.y + L\u0445\u0445LLLLLLLL\u0445L.height + 2.0f;
        float \u0445\u0445\u0445LLL\u0445\u0445\u0445\u0445\u0445LL = L\u0445\u0445LLLLLLLL\u0445L.x + (float)heightOffset - 2.0f;
        float LLL\u0445LL\u0445\u0445\u0445\u0445\u0445LL = L\u0445\u0445LLLLLLLL\u0445L.y + L\u0445\u0445LLLLLLLL\u0445L.height + (float)heightOffset - 2.0f;
        if ((float)\u0445\u0445\u0445LLLLLLLL\u0445L <= \u0445\u0445LLLL\u0445\u0445\u0445\u0445\u0445LL || (float)\u0445LL\u0445LLLLLLL\u0445L <= \u0445L\u0445LLL\u0445\u0445\u0445\u0445\u0445LL || (float)\u0445\u0445\u0445LLLLLLLL\u0445L >= \u0445\u0445\u0445LLL\u0445\u0445\u0445\u0445\u0445LL || (float)\u0445LL\u0445LLLLLLL\u0445L >= LLL\u0445LL\u0445\u0445\u0445\u0445\u0445LL) {
            L\u0445\u0445LLLLLLLL\u0445L.colorSelectorDragging = false;
        }
        float \u0445LL\u0445LL\u0445\u0445\u0445\u0445\u0445LL = L\u0445\u0445LLLLLLLL\u0445L.saturation * (\u0445\u0445\u0445LLL\u0445\u0445\u0445\u0445\u0445LL - \u0445\u0445LLLL\u0445\u0445\u0445\u0445\u0445LL);
        float L\u0445L\u0445LL\u0445\u0445\u0445\u0445\u0445LL = (1.0f - L\u0445\u0445LLLLLLLL\u0445L.brightness) * (LLL\u0445LL\u0445\u0445\u0445\u0445\u0445LL - \u0445L\u0445LLL\u0445\u0445\u0445\u0445\u0445LL);
        if (L\u0445\u0445LLLLLLLL\u0445L.colorSelectorDragging) {
            float \u0445\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445\u0445LL = \u0445\u0445\u0445LLL\u0445\u0445\u0445\u0445\u0445LL - \u0445\u0445LLLL\u0445\u0445\u0445\u0445\u0445LL;
            float \u0445L\u0445\u0445\u0445\u0445L\u0445\u0445\u0445\u0445LL = (float)\u0445\u0445\u0445LLLLLLLL\u0445L - \u0445\u0445LLLL\u0445\u0445\u0445\u0445\u0445LL;
            L\u0445\u0445LLLLLLLL\u0445L.saturation = \u0445L\u0445\u0445\u0445\u0445L\u0445\u0445\u0445\u0445LL / \u0445\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445\u0445LL;
            \u0445LL\u0445LL\u0445\u0445\u0445\u0445\u0445LL = \u0445L\u0445\u0445\u0445\u0445L\u0445\u0445\u0445\u0445LL;
            float LLLLLL\u0445\u0445\u0445\u0445\u0445LL = LLL\u0445LL\u0445\u0445\u0445\u0445\u0445LL - \u0445L\u0445LLL\u0445\u0445\u0445\u0445\u0445LL;
            float L\u0445LLLL\u0445\u0445\u0445\u0445\u0445LL = (float)\u0445LL\u0445LLLLLLL\u0445L - \u0445L\u0445LLL\u0445\u0445\u0445\u0445\u0445LL;
            L\u0445\u0445LLLLLLLL\u0445L.brightness = 1.0f - L\u0445LLLL\u0445\u0445\u0445\u0445\u0445LL / LLLLLL\u0445\u0445\u0445\u0445\u0445LL;
            L\u0445L\u0445LL\u0445\u0445\u0445\u0445\u0445LL = L\u0445LLLL\u0445\u0445\u0445\u0445\u0445LL;
            L\u0445\u0445LLLLLLLL\u0445L.updateColor(Color.HSBtoRGB(L\u0445\u0445LLLLLLLL\u0445L.hue, L\u0445\u0445LLLLLLLL\u0445L.saturation, L\u0445\u0445LLLLLLLL\u0445L.brightness), false);
        }
        RectHelper.drawRect(\u0445\u0445LLLL\u0445\u0445\u0445\u0445\u0445LL, \u0445L\u0445LLL\u0445\u0445\u0445\u0445\u0445LL, \u0445\u0445\u0445LLL\u0445\u0445\u0445\u0445\u0445LL, LLL\u0445LL\u0445\u0445\u0445\u0445\u0445LL, -16777216);
        L\u0445\u0445LLLLLLLL\u0445L.drawColorPickerRect(\u0445\u0445LLLL\u0445\u0445\u0445\u0445\u0445LL + 0.5f, \u0445L\u0445LLL\u0445\u0445\u0445\u0445\u0445LL + 0.5f, \u0445\u0445\u0445LLL\u0445\u0445\u0445\u0445\u0445LL - 0.5f, LLL\u0445LL\u0445\u0445\u0445\u0445\u0445LL - 0.5f);
        float \u0445\u0445L\u0445LL\u0445\u0445\u0445\u0445\u0445LL = 2.0f;
        float LL\u0445\u0445LL\u0445\u0445\u0445\u0445\u0445LL = \u0445\u0445L\u0445LL\u0445\u0445\u0445\u0445\u0445LL / 2.0f;
        float \u0445L\u0445\u0445LL\u0445\u0445\u0445\u0445\u0445LL = \u0445\u0445LLLL\u0445\u0445\u0445\u0445\u0445LL + \u0445LL\u0445LL\u0445\u0445\u0445\u0445\u0445LL + LL\u0445\u0445LL\u0445\u0445\u0445\u0445\u0445LL;
        float L\u0445\u0445\u0445LL\u0445\u0445\u0445\u0445\u0445LL = \u0445L\u0445LLL\u0445\u0445\u0445\u0445\u0445LL + L\u0445L\u0445LL\u0445\u0445\u0445\u0445\u0445LL + LL\u0445\u0445LL\u0445\u0445\u0445\u0445\u0445LL;
        RenderHelper.drawCircle(\u0445L\u0445\u0445LL\u0445\u0445\u0445\u0445\u0445LL, L\u0445\u0445\u0445LL\u0445\u0445\u0445\u0445\u0445LL, 1.4f, true, Color.BLACK);
        RenderHelper.drawCircle(\u0445L\u0445\u0445LL\u0445\u0445\u0445\u0445\u0445LL, L\u0445\u0445\u0445LL\u0445\u0445\u0445\u0445\u0445LL, 1.0f, true, Color.WHITE);
        float \u0445\u0445\u0445L\u0445L\u0445\u0445\u0445\u0445\u0445LL = L\u0445\u0445LLLLLLLL\u0445L.x + (float)heightOffset - 1.0f;
        float \u0445LL\u0445\u0445L\u0445\u0445\u0445\u0445\u0445LL = L\u0445\u0445LLLLLLLL\u0445L.y + L\u0445\u0445LLLLLLLL\u0445L.height + 2.0f;
        float \u0445\u0445L\u0445\u0445L\u0445\u0445\u0445\u0445\u0445LL = \u0445\u0445\u0445L\u0445L\u0445\u0445\u0445\u0445\u0445LL + 5.0f;
        float \u0445L\u0445\u0445\u0445L\u0445\u0445\u0445\u0445\u0445LL = L\u0445\u0445LLLLLLLL\u0445L.y + L\u0445\u0445LLLLLLLL\u0445L.height + (float)heightOffset - 2.0f;
        if ((float)\u0445\u0445\u0445LLLLLLLL\u0445L <= \u0445\u0445\u0445L\u0445L\u0445\u0445\u0445\u0445\u0445LL || (float)\u0445LL\u0445LLLLLLL\u0445L <= \u0445LL\u0445\u0445L\u0445\u0445\u0445\u0445\u0445LL || (float)\u0445\u0445\u0445LLLLLLLL\u0445L >= \u0445\u0445L\u0445\u0445L\u0445\u0445\u0445\u0445\u0445LL || (float)\u0445LL\u0445LLLLLLL\u0445L >= \u0445L\u0445\u0445\u0445L\u0445\u0445\u0445\u0445\u0445LL) {
            L\u0445\u0445LLLLLLLL\u0445L.hueSelectorDragging = false;
        }
        float \u0445\u0445\u0445\u0445\u0445L\u0445\u0445\u0445\u0445\u0445LL = L\u0445\u0445LLLLLLLL\u0445L.hue * (\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445\u0445\u0445LL - \u0445LL\u0445\u0445L\u0445\u0445\u0445\u0445\u0445LL);
        if (L\u0445\u0445LLLLLLLL\u0445L.hueSelectorDragging) {
            float LLLL\u0445L\u0445\u0445\u0445\u0445\u0445LL = \u0445L\u0445\u0445\u0445L\u0445\u0445\u0445\u0445\u0445LL - \u0445LL\u0445\u0445L\u0445\u0445\u0445\u0445\u0445LL;
            float L\u0445LL\u0445L\u0445\u0445\u0445\u0445\u0445LL = (float)\u0445LL\u0445LLLLLLL\u0445L - \u0445LL\u0445\u0445L\u0445\u0445\u0445\u0445\u0445LL;
            L\u0445\u0445LLLLLLLL\u0445L.hue = L\u0445LL\u0445L\u0445\u0445\u0445\u0445\u0445LL / LLLL\u0445L\u0445\u0445\u0445\u0445\u0445LL;
            \u0445\u0445\u0445\u0445\u0445L\u0445\u0445\u0445\u0445\u0445LL = L\u0445LL\u0445L\u0445\u0445\u0445\u0445\u0445LL;
            L\u0445\u0445LLLLLLLL\u0445L.updateColor(Color.HSBtoRGB(L\u0445\u0445LLLLLLLL\u0445L.hue, L\u0445\u0445LLLLLLLL\u0445L.saturation, L\u0445\u0445LLLLLLLL\u0445L.brightness), false);
        }
        RectHelper.drawSmoothRect(\u0445\u0445\u0445L\u0445L\u0445\u0445\u0445\u0445\u0445LL, \u0445LL\u0445\u0445L\u0445\u0445\u0445\u0445\u0445LL, \u0445\u0445L\u0445\u0445L\u0445\u0445\u0445\u0445\u0445LL, \u0445L\u0445\u0445\u0445L\u0445\u0445\u0445\u0445\u0445LL, -16777216);
        float \u0445LLLL\u0445\u0445\u0445\u0445\u0445\u0445LL = 0.2f;
        float \u0445\u0445LLL\u0445\u0445\u0445\u0445\u0445\u0445LL = 1.0f / \u0445LLLL\u0445\u0445\u0445\u0445\u0445\u0445LL;
        float \u0445L\u0445LL\u0445\u0445\u0445\u0445\u0445\u0445LL = \u0445L\u0445\u0445\u0445L\u0445\u0445\u0445\u0445\u0445LL - \u0445LL\u0445\u0445L\u0445\u0445\u0445\u0445\u0445LL;
        float \u0445\u0445\u0445LL\u0445\u0445\u0445\u0445\u0445\u0445LL = \u0445LL\u0445\u0445L\u0445\u0445\u0445\u0445\u0445LL + 0.5f;
        float LLL\u0445L\u0445\u0445\u0445\u0445\u0445\u0445LL = \u0445L\u0445LL\u0445\u0445\u0445\u0445\u0445\u0445LL / \u0445\u0445LLL\u0445\u0445\u0445\u0445\u0445\u0445LL;
        int L\u0445\u0445L\u0445L\u0445\u0445\u0445\u0445\u0445LL = 0;
        if ((float)L\u0445\u0445L\u0445L\u0445\u0445\u0445\u0445\u0445LL < \u0445\u0445LLL\u0445\u0445\u0445\u0445\u0445\u0445LL) {
            boolean LL\u0445L\u0445L\u0445\u0445\u0445\u0445\u0445LL;
            boolean bl2 = LL\u0445L\u0445L\u0445\u0445\u0445\u0445\u0445LL = (float)L\u0445\u0445L\u0445L\u0445\u0445\u0445\u0445\u0445LL == \u0445\u0445LLL\u0445\u0445\u0445\u0445\u0445\u0445LL - 1.0f;
            if (LL\u0445L\u0445L\u0445\u0445\u0445\u0445\u0445LL) {
                LLL\u0445L\u0445\u0445\u0445\u0445\u0445\u0445LL -= 1.0f;
            }
            gui.drawGradientRect(\u0445\u0445\u0445L\u0445L\u0445\u0445\u0445\u0445\u0445LL + 0.5f, \u0445\u0445\u0445LL\u0445\u0445\u0445\u0445\u0445\u0445LL, \u0445\u0445L\u0445\u0445L\u0445\u0445\u0445\u0445\u0445LL - 0.5f, \u0445\u0445\u0445LL\u0445\u0445\u0445\u0445\u0445\u0445LL + LLL\u0445L\u0445\u0445\u0445\u0445\u0445\u0445LL, Color.HSBtoRGB(\u0445LLLL\u0445\u0445\u0445\u0445\u0445\u0445LL * (float)L\u0445\u0445L\u0445L\u0445\u0445\u0445\u0445\u0445LL, 1.0f, 1.0f), Color.HSBtoRGB(\u0445LLLL\u0445\u0445\u0445\u0445\u0445\u0445LL * (float)(L\u0445\u0445L\u0445L\u0445\u0445\u0445\u0445\u0445LL + 1), 1.0f, 1.0f));
            if (!LL\u0445L\u0445L\u0445\u0445\u0445\u0445\u0445LL) {
                \u0445\u0445\u0445LL\u0445\u0445\u0445\u0445\u0445\u0445LL += LLL\u0445L\u0445\u0445\u0445\u0445\u0445\u0445LL;
            }
            ++L\u0445\u0445L\u0445L\u0445\u0445\u0445\u0445\u0445LL;
            return;
        }
        float \u0445LL\u0445L\u0445\u0445\u0445\u0445\u0445\u0445LL = 1.5f;
        float L\u0445L\u0445L\u0445\u0445\u0445\u0445\u0445\u0445LL = 0.5f;
        float \u0445\u0445L\u0445L\u0445\u0445\u0445\u0445\u0445\u0445LL = \u0445LL\u0445L\u0445\u0445\u0445\u0445\u0445\u0445LL / 2.0f;
        float LL\u0445\u0445L\u0445\u0445\u0445\u0445\u0445\u0445LL = \u0445LL\u0445\u0445L\u0445\u0445\u0445\u0445\u0445LL + \u0445\u0445\u0445\u0445\u0445L\u0445\u0445\u0445\u0445\u0445LL - \u0445\u0445L\u0445L\u0445\u0445\u0445\u0445\u0445\u0445LL;
        float \u0445L\u0445\u0445L\u0445\u0445\u0445\u0445\u0445\u0445LL = \u0445LL\u0445\u0445L\u0445\u0445\u0445\u0445\u0445LL + \u0445\u0445\u0445\u0445\u0445L\u0445\u0445\u0445\u0445\u0445LL + \u0445\u0445L\u0445L\u0445\u0445\u0445\u0445\u0445\u0445LL;
        RectHelper.drawRect(\u0445\u0445\u0445L\u0445L\u0445\u0445\u0445\u0445\u0445LL - L\u0445L\u0445L\u0445\u0445\u0445\u0445\u0445\u0445LL, LL\u0445\u0445L\u0445\u0445\u0445\u0445\u0445\u0445LL - L\u0445L\u0445L\u0445\u0445\u0445\u0445\u0445\u0445LL, \u0445\u0445L\u0445\u0445L\u0445\u0445\u0445\u0445\u0445LL + L\u0445L\u0445L\u0445\u0445\u0445\u0445\u0445\u0445LL, \u0445L\u0445\u0445L\u0445\u0445\u0445\u0445\u0445\u0445LL + L\u0445L\u0445L\u0445\u0445\u0445\u0445\u0445\u0445LL, -16777216);
        RectHelper.drawRect(\u0445\u0445\u0445L\u0445L\u0445\u0445\u0445\u0445\u0445LL, LL\u0445\u0445L\u0445\u0445\u0445\u0445\u0445\u0445LL, \u0445\u0445L\u0445\u0445L\u0445\u0445\u0445\u0445\u0445LL, \u0445L\u0445\u0445L\u0445\u0445\u0445\u0445\u0445\u0445LL, -1);
        float \u0445LLL\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL = L\u0445\u0445LLLLLLLL\u0445L.x + (float)heightOffset + 6.0f;
        float L\u0445LL\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL = L\u0445\u0445LLLLLLLL\u0445L.y + L\u0445\u0445LLLLLLLL\u0445L.height + 2.0f;
        float \u0445\u0445LL\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL = \u0445LLL\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL + 5.0f;
        float LL\u0445L\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL = L\u0445\u0445LLLLLLLL\u0445L.y + L\u0445\u0445LLLLLLLL\u0445L.height + (float)heightOffset - 2.0f;
        if ((float)\u0445\u0445\u0445LLLLLLLL\u0445L <= \u0445LLL\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL || (float)\u0445LL\u0445LLLLLLL\u0445L <= L\u0445LL\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL || (float)\u0445\u0445\u0445LLLLLLLL\u0445L >= \u0445\u0445LL\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL || (float)\u0445LL\u0445LLLLLLL\u0445L >= LL\u0445L\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL) {
            L\u0445\u0445LLLLLLLL\u0445L.alphaSelectorDragging = false;
        }
        int \u0445L\u0445L\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL = Color.HSBtoRGB(L\u0445\u0445LLLLLLLL\u0445L.hue, L\u0445\u0445LLLLLLLL\u0445L.saturation, L\u0445\u0445LLLLLLLL\u0445L.brightness);
        int L\u0445\u0445L\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL = \u0445L\u0445L\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL >> 16 & 0xFF;
        int LLL\u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL = \u0445L\u0445L\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL >> 8 & 0xFF;
        int L\u0445L\u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL = \u0445L\u0445L\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL & 0xFF;
        float \u0445\u0445L\u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL = L\u0445\u0445LLLLLLLL\u0445L.alpha * (LL\u0445L\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL - L\u0445LL\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL);
        if (L\u0445\u0445LLLLLLLL\u0445L.alphaSelectorDragging) {
            float L\u0445\u0445\u0445L\u0445\u0445\u0445\u0445\u0445\u0445LL = LL\u0445L\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL - L\u0445LL\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL;
            float LLLL\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL = (float)\u0445LL\u0445LLLLLLL\u0445L - L\u0445LL\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL;
            L\u0445\u0445LLLLLLLL\u0445L.alpha = LLLL\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL / L\u0445\u0445\u0445L\u0445\u0445\u0445\u0445\u0445\u0445LL;
            \u0445\u0445L\u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL = LLLL\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL;
            L\u0445\u0445LLLLLLLL\u0445L.updateColor(new Color(L\u0445\u0445L\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL, LLL\u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL, L\u0445L\u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL, (int)(L\u0445\u0445LLLLLLLL\u0445L.alpha * 255.0f)).getRGB(), true);
        }
        Gui.drawRect(\u0445LLL\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL, L\u0445LL\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL, LL\u0445L\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL, Color.GRAY.getRGB());
        L\u0445\u0445LLLLLLLL\u0445L.drawCheckeredBackground(\u0445LLL\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL + 0.5f, L\u0445LL\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL + 0.5f, \u0445\u0445LL\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL - 0.5f, LL\u0445L\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL - 0.5f);
        gui.drawGradientRect(\u0445LLL\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL + 0.5f, L\u0445LL\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL + 0.5f, \u0445\u0445LL\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL - 0.5f, LL\u0445L\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL - 0.5f, new Color(L\u0445\u0445L\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL, LLL\u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL, L\u0445L\u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL, 0).getRGB(), new Color(L\u0445\u0445L\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL, LLL\u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL, L\u0445L\u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL, 255).getRGB());
        float \u0445L\u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL = 2.0f;
        float \u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL = 0.5f;
        float \u0445LLLLLLLLLL\u0445L = \u0445L\u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL / 2.0f;
        float L\u0445LLLLLLLLL\u0445L = L\u0445LL\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL + \u0445\u0445L\u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL - \u0445LLLLLLLLLL\u0445L;
        float LL\u0445LLLLLLLL\u0445L = L\u0445LL\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL + \u0445\u0445L\u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL + \u0445LLLLLLLLLL\u0445L;
        RectHelper.drawRect(\u0445LLL\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL - \u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL, L\u0445LLLLLLLLL\u0445L - \u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL + \u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL, LL\u0445LLLLLLLL\u0445L + \u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL, -16777216);
        RectHelper.drawRect(\u0445LLL\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL, L\u0445LLLLLLLLL\u0445L, \u0445\u0445LL\u0445\u0445\u0445\u0445\u0445\u0445\u0445LL, LL\u0445LLLLLLLL\u0445L, -1);
    }

    private void drawCheckeredBackground(float \u0445\u0445L\u0445\u0445\u0445LLLLL\u0445L, float LL\u0445\u0445\u0445\u0445LLLLL\u0445L, float L\u0445\u0445\u0445\u0445\u0445LLLLL\u0445L, float LLLLLL\u0445LLLL\u0445L) {
        RectHelper.drawRect(\u0445\u0445L\u0445\u0445\u0445LLLLL\u0445L, LL\u0445\u0445\u0445\u0445LLLLL\u0445L, L\u0445\u0445\u0445\u0445\u0445LLLLL\u0445L, LLLLLL\u0445LLLL\u0445L, -1);
        boolean \u0445LL\u0445\u0445\u0445LLLLL\u0445L = false;
        if (LL\u0445\u0445\u0445\u0445LLLLL\u0445L < LLLLLL\u0445LLLL\u0445L) {
            float LLL\u0445\u0445\u0445LLLLL\u0445L = \u0445\u0445L\u0445\u0445\u0445LLLLL\u0445L + (float)((\u0445LL\u0445\u0445\u0445LLLLL\u0445L = !\u0445LL\u0445\u0445\u0445LLLLL\u0445L) ? 1 : 0);
            if (LLL\u0445\u0445\u0445LLLLL\u0445L < L\u0445\u0445\u0445\u0445\u0445LLLLL\u0445L) {
                RectHelper.drawRect(LLL\u0445\u0445\u0445LLLLL\u0445L, LL\u0445\u0445\u0445\u0445LLLLL\u0445L, LLL\u0445\u0445\u0445LLLLL\u0445L + 1.0f, LL\u0445\u0445\u0445\u0445LLLLL\u0445L + 1.0f, -8355712);
                LLL\u0445\u0445\u0445LLLLL\u0445L += 2.0f;
                return;
            }
            LL\u0445\u0445\u0445\u0445LLLLL\u0445L += 1.0f;
            return;
        }
    }

    private void updateColor(int LLL\u0445\u0445L\u0445LLLL\u0445L, boolean L\u0445L\u0445\u0445L\u0445LLLL\u0445L) {
        ColorPickerComponent \u0445\u0445\u0445L\u0445L\u0445LLLL\u0445L;
        if (L\u0445L\u0445\u0445L\u0445LLLL\u0445L) {
            ((ColorSetting)\u0445\u0445\u0445L\u0445L\u0445LLLL\u0445L.setting).setColorValue(LLL\u0445\u0445L\u0445LLLL\u0445L);
        } else {
            ((ColorSetting)\u0445\u0445\u0445L\u0445L\u0445LLLL\u0445L.setting).setColorValue(new Color(LLL\u0445\u0445L\u0445LLLL\u0445L >> 16 & 0xFF, LLL\u0445\u0445L\u0445LLLL\u0445L >> 8 & 0xFF, LLL\u0445\u0445L\u0445LLLL\u0445L & 0xFF, (int)(\u0445\u0445\u0445L\u0445L\u0445LLLL\u0445L.alpha * 255.0f)).getRGB());
        }
    }

    @Override
    public void mouseClicked(int L\u0445LL\u0445LL\u0445LLL\u0445L, int \u0445\u0445LL\u0445LL\u0445LLL\u0445L, int LL\u0445L\u0445LL\u0445LLL\u0445L) {
        if (LL\u0445L\u0445LL\u0445LLL\u0445L == 0) {
            ColorPickerComponent \u0445LLL\u0445LL\u0445LLL\u0445L;
            float \u0445L\u0445LLLL\u0445LLL\u0445L = \u0445LLL\u0445LL\u0445LLL\u0445L.x + 2.0f;
            float L\u0445\u0445LLLL\u0445LLL\u0445L = \u0445LLL\u0445LL\u0445LLL\u0445L.y + \u0445LLL\u0445LL\u0445LLL\u0445L.height + 2.0f;
            float \u0445\u0445\u0445LLLL\u0445LLL\u0445L = \u0445LLL\u0445LL\u0445LLL\u0445L.x + (float)heightOffset - 2.0f;
            float LLL\u0445LLL\u0445LLL\u0445L = \u0445LLL\u0445LL\u0445LLL\u0445L.y + \u0445LLL\u0445LL\u0445LLL\u0445L.height + (float)heightOffset - 2.0f;
            float \u0445LL\u0445LLL\u0445LLL\u0445L = \u0445LLL\u0445LL\u0445LLL\u0445L.x + (float)heightOffset - 1.0f;
            float L\u0445L\u0445LLL\u0445LLL\u0445L = \u0445LLL\u0445LL\u0445LLL\u0445L.y + \u0445LLL\u0445LL\u0445LLL\u0445L.height + 2.0f;
            float \u0445\u0445L\u0445LLL\u0445LLL\u0445L = \u0445LL\u0445LLL\u0445LLL\u0445L + 5.0f;
            float LL\u0445\u0445LLL\u0445LLL\u0445L = \u0445LLL\u0445LL\u0445LLL\u0445L.y + \u0445LLL\u0445LL\u0445LLL\u0445L.height + (float)heightOffset - 2.0f;
            float \u0445L\u0445\u0445LLL\u0445LLL\u0445L = \u0445LLL\u0445LL\u0445LLL\u0445L.x + (float)heightOffset + 6.0f;
            float L\u0445\u0445\u0445LLL\u0445LLL\u0445L = \u0445LLL\u0445LL\u0445LLL\u0445L.y + \u0445LLL\u0445LL\u0445LLL\u0445L.height + 2.0f;
            float \u0445\u0445\u0445\u0445LLL\u0445LLL\u0445L = \u0445L\u0445\u0445LLL\u0445LLL\u0445L + 5.0f;
            float LLLL\u0445LL\u0445LLL\u0445L = \u0445LLL\u0445LL\u0445LLL\u0445L.y + \u0445LLL\u0445LL\u0445LLL\u0445L.height + (float)heightOffset - 2.0f;
            \u0445LLL\u0445LL\u0445LLL\u0445L.colorSelectorDragging = !\u0445LLL\u0445LL\u0445LLL\u0445L.colorSelectorDragging && (float)L\u0445LL\u0445LL\u0445LLL\u0445L > \u0445L\u0445LLLL\u0445LLL\u0445L && (float)\u0445\u0445LL\u0445LL\u0445LLL\u0445L > L\u0445\u0445LLLL\u0445LLL\u0445L && (float)L\u0445LL\u0445LL\u0445LLL\u0445L < \u0445\u0445\u0445LLLL\u0445LLL\u0445L && (float)\u0445\u0445LL\u0445LL\u0445LLL\u0445L < LLL\u0445LLL\u0445LLL\u0445L;
            \u0445LLL\u0445LL\u0445LLL\u0445L.hueSelectorDragging = !\u0445LLL\u0445LL\u0445LLL\u0445L.hueSelectorDragging && (float)L\u0445LL\u0445LL\u0445LLL\u0445L > \u0445LL\u0445LLL\u0445LLL\u0445L && (float)\u0445\u0445LL\u0445LL\u0445LLL\u0445L > L\u0445L\u0445LLL\u0445LLL\u0445L && (float)L\u0445LL\u0445LL\u0445LLL\u0445L < \u0445\u0445L\u0445LLL\u0445LLL\u0445L && (float)\u0445\u0445LL\u0445LL\u0445LLL\u0445L < LL\u0445\u0445LLL\u0445LLL\u0445L;
            \u0445LLL\u0445LL\u0445LLL\u0445L.alphaSelectorDragging = !\u0445LLL\u0445LL\u0445LLL\u0445L.alphaSelectorDragging && (float)L\u0445LL\u0445LL\u0445LLL\u0445L > \u0445L\u0445\u0445LLL\u0445LLL\u0445L && (float)\u0445\u0445LL\u0445LL\u0445LLL\u0445L > L\u0445\u0445\u0445LLL\u0445LLL\u0445L && (float)L\u0445LL\u0445LL\u0445LLL\u0445L < \u0445\u0445\u0445\u0445LLL\u0445LLL\u0445L && (float)\u0445\u0445LL\u0445LL\u0445LLL\u0445L < LLLL\u0445LL\u0445LLL\u0445L;
        }
    }

    @Override
    public void mouseReleased(int L\u0445\u0445L\u0445\u0445L\u0445LLL\u0445L, int \u0445\u0445\u0445L\u0445\u0445L\u0445LLL\u0445L, int LLL\u0445\u0445\u0445L\u0445LLL\u0445L) {
        ColorPickerComponent \u0445L\u0445L\u0445\u0445L\u0445LLL\u0445L;
        if (\u0445L\u0445L\u0445\u0445L\u0445LLL\u0445L.hueSelectorDragging) {
            \u0445L\u0445L\u0445\u0445L\u0445LLL\u0445L.hueSelectorDragging = false;
        } else if (\u0445L\u0445L\u0445\u0445L\u0445LLL\u0445L.colorSelectorDragging) {
            \u0445L\u0445L\u0445\u0445L\u0445LLL\u0445L.colorSelectorDragging = false;
        } else if (\u0445L\u0445L\u0445\u0445L\u0445LLL\u0445L.alphaSelectorDragging) {
            \u0445L\u0445L\u0445\u0445L\u0445LLL\u0445L.alphaSelectorDragging = false;
        }
    }

    private float[] getHSBFromColor(int LL\u0445LLL\u0445\u0445LLL\u0445L) {
        int \u0445L\u0445LLL\u0445\u0445LLL\u0445L = LL\u0445LLL\u0445\u0445LLL\u0445L >> 16 & 0xFF;
        int \u0445LL\u0445LL\u0445\u0445LLL\u0445L = LL\u0445LLL\u0445\u0445LLL\u0445L >> 8 & 0xFF;
        int \u0445\u0445L\u0445LL\u0445\u0445LLL\u0445L = LL\u0445LLL\u0445\u0445LLL\u0445L & 0xFF;
        return Color.RGBtoHSB(\u0445L\u0445LLL\u0445\u0445LLL\u0445L, \u0445LL\u0445LL\u0445\u0445LLL\u0445L, \u0445\u0445L\u0445LL\u0445\u0445LLL\u0445L, null);
    }

    public void drawColorPickerRect(float \u0445\u0445\u0445\u0445\u0445L\u0445\u0445LLL\u0445L, float LLLLL\u0445\u0445\u0445LLL\u0445L, float \u0445LLLL\u0445\u0445\u0445LLL\u0445L, float \u0445\u0445LLL\u0445\u0445\u0445LLL\u0445L) {
        ColorPickerComponent L\u0445\u0445\u0445\u0445L\u0445\u0445LLL\u0445L;
        int \u0445L\u0445LL\u0445\u0445\u0445LLL\u0445L = Color.HSBtoRGB(L\u0445\u0445\u0445\u0445L\u0445\u0445LLL\u0445L.hue, 1.0f, 1.0f);
        GlStateManager.disable(3553);
        GlStateManager.enableBlend();
        GlStateManager.shadeModel(7425);
        buffer.begin(7, DefaultVertexFormats.POSITION_COLOR);
        buffer.pos(\u0445LLLL\u0445\u0445\u0445LLL\u0445L, LLLLL\u0445\u0445\u0445LLL\u0445L, 0.0).color(\u0445L\u0445LL\u0445\u0445\u0445LLL\u0445L).endVertex();
        buffer.pos(\u0445\u0445\u0445\u0445\u0445L\u0445\u0445LLL\u0445L, LLLLL\u0445\u0445\u0445LLL\u0445L, 0.0).color(-1).endVertex();
        buffer.pos(\u0445\u0445\u0445\u0445\u0445L\u0445\u0445LLL\u0445L, \u0445\u0445LLL\u0445\u0445\u0445LLL\u0445L, 0.0).color(-1).endVertex();
        buffer.pos(\u0445LLLL\u0445\u0445\u0445LLL\u0445L, \u0445\u0445LLL\u0445\u0445\u0445LLL\u0445L, 0.0).color(\u0445L\u0445LL\u0445\u0445\u0445LLL\u0445L).endVertex();
        tessellator.draw();
        buffer.begin(7, DefaultVertexFormats.POSITION_COLOR);
        buffer.pos(\u0445LLLL\u0445\u0445\u0445LLL\u0445L, LLLLL\u0445\u0445\u0445LLL\u0445L, 0.0).color(0x18000000).endVertex();
        buffer.pos(\u0445\u0445\u0445\u0445\u0445L\u0445\u0445LLL\u0445L, LLLLL\u0445\u0445\u0445LLL\u0445L, 0.0).color(0x18000000).endVertex();
        buffer.pos(\u0445\u0445\u0445\u0445\u0445L\u0445\u0445LLL\u0445L, \u0445\u0445LLL\u0445\u0445\u0445LLL\u0445L, 0.0).color(-16777216).endVertex();
        buffer.pos(\u0445LLLL\u0445\u0445\u0445LLL\u0445L, \u0445\u0445LLL\u0445\u0445\u0445LLL\u0445L, 0.0).color(-16777216).endVertex();
        tessellator.draw();
        GlStateManager.disableBlend();
        GlStateManager.shadeModel(7425);
        GlStateManager.enable(3553);
    }
}

