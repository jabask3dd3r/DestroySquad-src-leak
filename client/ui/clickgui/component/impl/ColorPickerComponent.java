/*
 * Decompiled with CFR 0.152.
 */
package org.Destroy.client.ui.clickgui.component.impl;

import java.awt.Color;
import net.minecraft.client.gui.Gui;
import net.minecraft.client.gui.ScaledResolution;
import net.minecraft.client.renderer.BufferBuilder;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.Tessellator;
import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
import org.Destroy.client.helpers.render.RenderHelper;
import org.Destroy.client.helpers.render.rect.RectHelper;
import org.Destroy.client.settings.Setting;
import org.Destroy.client.settings.impl.ColorSetting;
import org.Destroy.client.ui.clickgui.component.Component;
import org.Destroy.client.ui.clickgui.component.ExpandableComponent;
import org.Destroy.client.ui.clickgui.component.PropertyComponent;
import org.lwjgl.opengl.GL11;

public class ColorPickerComponent
extends ExpandableComponent
implements PropertyComponent {
    private static final int COLOR_PICKER_HEIGHT = 80;
    public static Tessellator tessellator = Tessellator.getInstance();
    public static BufferBuilder buffer = tessellator.getBuffer();
    private final ColorSetting colorSetting;
    private float hue;
    private float saturation;
    private float brightness;
    private float alpha;
    private boolean colorSelectorDragging;
    private boolean hueSelectorDragging;
    private boolean alphaSelectorDragging;

    public ColorPickerComponent(Component \u0445L\u0445L\u0445\u0445\u0445LLLL\u0445LL, ColorSetting L\u0445\u0445L\u0445\u0445\u0445LLLL\u0445LL, int \u0445\u0445\u0445L\u0445\u0445\u0445LLLL\u0445LL, int LLL\u0445\u0445\u0445\u0445LLLL\u0445LL, int \u0445LL\u0445\u0445\u0445\u0445LLLL\u0445LL, int L\u0445L\u0445\u0445\u0445\u0445LLLL\u0445LL) {
        super(\u0445L\u0445L\u0445\u0445\u0445LLLL\u0445LL, L\u0445\u0445L\u0445\u0445\u0445LLLL\u0445LL.getName(), \u0445\u0445\u0445L\u0445\u0445\u0445LLLL\u0445LL, LLL\u0445\u0445\u0445\u0445LLLL\u0445LL, \u0445LL\u0445\u0445\u0445\u0445LLLL\u0445LL, L\u0445L\u0445\u0445\u0445\u0445LLLL\u0445LL);
        ColorPickerComponent LL\u0445L\u0445\u0445\u0445LLLL\u0445LL;
        LL\u0445L\u0445\u0445\u0445LLLL\u0445LL.colorSetting = L\u0445\u0445L\u0445\u0445\u0445LLLL\u0445LL;
        int \u0445\u0445L\u0445\u0445\u0445\u0445LLLL\u0445LL = L\u0445\u0445L\u0445\u0445\u0445LLLL\u0445LL.getColorValue();
        float[] LL\u0445\u0445\u0445\u0445\u0445LLLL\u0445LL = LL\u0445L\u0445\u0445\u0445LLLL\u0445LL.getHSBFromColor(\u0445\u0445L\u0445\u0445\u0445\u0445LLLL\u0445LL);
        LL\u0445L\u0445\u0445\u0445LLLL\u0445LL.hue = LL\u0445\u0445\u0445\u0445\u0445LLLL\u0445LL[0];
        LL\u0445L\u0445\u0445\u0445LLLL\u0445LL.saturation = LL\u0445\u0445\u0445\u0445\u0445LLLL\u0445LL[1];
        LL\u0445L\u0445\u0445\u0445LLLL\u0445LL.brightness = LL\u0445\u0445\u0445\u0445\u0445LLLL\u0445LL[2];
        LL\u0445L\u0445\u0445\u0445LLLL\u0445LL.alpha = (float)(\u0445\u0445L\u0445\u0445\u0445\u0445LLLL\u0445LL >> 24 & 0xFF) / 255.0f;
    }

    @Override
    public void drawComponent(ScaledResolution \u0445LLLL\u0445\u0445\u0445LLL\u0445LL, int L\u0445LLL\u0445\u0445\u0445LLL\u0445LL, int \u0445\u0445LLL\u0445\u0445\u0445LLL\u0445LL) {
        ColorPickerComponent LLLLL\u0445\u0445\u0445LLL\u0445LL;
        super.drawComponent(\u0445LLLL\u0445\u0445\u0445LLL\u0445LL, L\u0445LLL\u0445\u0445\u0445LLL\u0445LL, \u0445\u0445LLL\u0445\u0445\u0445LLL\u0445LL);
        int LL\u0445LL\u0445\u0445\u0445LLL\u0445LL = LLLLL\u0445\u0445\u0445LLL\u0445LL.getX();
        int \u0445L\u0445LL\u0445\u0445\u0445LLL\u0445LL = LLLLL\u0445\u0445\u0445LLL\u0445LL.getY();
        int L\u0445\u0445LL\u0445\u0445\u0445LLL\u0445LL = LLLLL\u0445\u0445\u0445LLL\u0445LL.getWidth();
        int \u0445\u0445\u0445LL\u0445\u0445\u0445LLL\u0445LL = LLLLL\u0445\u0445\u0445LLL\u0445LL.getHeight();
        int LLL\u0445L\u0445\u0445\u0445LLL\u0445LL = 0xFFFFFF;
        Gui.drawRect(LL\u0445LL\u0445\u0445\u0445LLL\u0445LL, \u0445L\u0445LL\u0445\u0445\u0445LLL\u0445LL, LL\u0445LL\u0445\u0445\u0445LLL\u0445LL + L\u0445\u0445LL\u0445\u0445\u0445LLL\u0445LL, \u0445L\u0445LL\u0445\u0445\u0445LLL\u0445LL + \u0445\u0445\u0445LL\u0445\u0445\u0445LLL\u0445LL, new Color(20, 20, 20, 160).getRGB());
        ColorPickerComponent.mc.fontRenderer.drawStringWithShadow(LLLLL\u0445\u0445\u0445LLL\u0445LL.getName(), LL\u0445LL\u0445\u0445\u0445LLL\u0445LL + 2, (float)\u0445L\u0445LL\u0445\u0445\u0445LLL\u0445LL + (float)\u0445\u0445\u0445LL\u0445\u0445\u0445LLL\u0445LL / 2.0f - 3.0f, LLL\u0445L\u0445\u0445\u0445LLL\u0445LL);
        float \u0445LL\u0445L\u0445\u0445\u0445LLL\u0445LL = LL\u0445LL\u0445\u0445\u0445LLL\u0445LL + L\u0445\u0445LL\u0445\u0445\u0445LLL\u0445LL - 13;
        float L\u0445L\u0445L\u0445\u0445\u0445LLL\u0445LL = (float)\u0445L\u0445LL\u0445\u0445\u0445LLL\u0445LL + (float)\u0445\u0445\u0445LL\u0445\u0445\u0445LLL\u0445LL / 2.0f - 2.0f;
        float \u0445\u0445L\u0445L\u0445\u0445\u0445LLL\u0445LL = LL\u0445LL\u0445\u0445\u0445LLL\u0445LL + L\u0445\u0445LL\u0445\u0445\u0445LLL\u0445LL - 2;
        float LL\u0445\u0445L\u0445\u0445\u0445LLL\u0445LL = (float)\u0445L\u0445LL\u0445\u0445\u0445LLL\u0445LL + (float)\u0445\u0445\u0445LL\u0445\u0445\u0445LLL\u0445LL / 2.0f + 2.0f;
        RectHelper.drawRect(\u0445LL\u0445L\u0445\u0445\u0445LLL\u0445LL - 0.5f, L\u0445L\u0445L\u0445\u0445\u0445LLL\u0445LL - 0.5f, \u0445\u0445L\u0445L\u0445\u0445\u0445LLL\u0445LL + 0.5f, LL\u0445\u0445L\u0445\u0445\u0445LLL\u0445LL + 0.5f, -16777216);
        LLLLL\u0445\u0445\u0445LLL\u0445LL.drawCheckeredBackground(\u0445LL\u0445L\u0445\u0445\u0445LLL\u0445LL, L\u0445L\u0445L\u0445\u0445\u0445LLL\u0445LL, \u0445\u0445L\u0445L\u0445\u0445\u0445LLL\u0445LL, LL\u0445\u0445L\u0445\u0445\u0445LLL\u0445LL);
        RectHelper.drawRect(\u0445LL\u0445L\u0445\u0445\u0445LLL\u0445LL, L\u0445L\u0445L\u0445\u0445\u0445LLL\u0445LL, \u0445\u0445L\u0445L\u0445\u0445\u0445LLL\u0445LL, LL\u0445\u0445L\u0445\u0445\u0445LLL\u0445LL, LLLLL\u0445\u0445\u0445LLL\u0445LL.colorSetting.getColorValue());
        if (LLLLL\u0445\u0445\u0445LLL\u0445LL.isExpanded()) {
            Gui.drawRect(LL\u0445LL\u0445\u0445\u0445LLL\u0445LL + 1, \u0445L\u0445LL\u0445\u0445\u0445LLL\u0445LL + \u0445\u0445\u0445LL\u0445\u0445\u0445LLL\u0445LL, LL\u0445LL\u0445\u0445\u0445LLL\u0445LL + L\u0445\u0445LL\u0445\u0445\u0445LLL\u0445LL - 1, \u0445L\u0445LL\u0445\u0445\u0445LLL\u0445LL + LLLLL\u0445\u0445\u0445LLL\u0445LL.getHeightWithExpand(), new Color(20, 20, 20, 160).getRGB());
            float LLL\u0445L\u0445L\u0445LLL\u0445LL = LL\u0445LL\u0445\u0445\u0445LLL\u0445LL + 2;
            float \u0445LL\u0445L\u0445L\u0445LLL\u0445LL = \u0445L\u0445LL\u0445\u0445\u0445LLL\u0445LL + \u0445\u0445\u0445LL\u0445\u0445\u0445LLL\u0445LL + 2;
            float L\u0445L\u0445L\u0445L\u0445LLL\u0445LL = LL\u0445LL\u0445\u0445\u0445LLL\u0445LL + 80 - 2;
            float \u0445\u0445L\u0445L\u0445L\u0445LLL\u0445LL = \u0445L\u0445LL\u0445\u0445\u0445LLL\u0445LL + \u0445\u0445\u0445LL\u0445\u0445\u0445LLL\u0445LL + 80 - 2;
            if ((float)L\u0445LLL\u0445\u0445\u0445LLL\u0445LL <= LLL\u0445L\u0445L\u0445LLL\u0445LL || (float)\u0445\u0445LLL\u0445\u0445\u0445LLL\u0445LL <= \u0445LL\u0445L\u0445L\u0445LLL\u0445LL || (float)L\u0445LLL\u0445\u0445\u0445LLL\u0445LL >= L\u0445L\u0445L\u0445L\u0445LLL\u0445LL || (float)\u0445\u0445LLL\u0445\u0445\u0445LLL\u0445LL >= \u0445\u0445L\u0445L\u0445L\u0445LLL\u0445LL) {
                LLLLL\u0445\u0445\u0445LLL\u0445LL.colorSelectorDragging = false;
            }
            float LL\u0445\u0445L\u0445L\u0445LLL\u0445LL = LLLLL\u0445\u0445\u0445LLL\u0445LL.saturation * (L\u0445L\u0445L\u0445L\u0445LLL\u0445LL - LLL\u0445L\u0445L\u0445LLL\u0445LL);
            float \u0445L\u0445\u0445L\u0445L\u0445LLL\u0445LL = (1.0f - LLLLL\u0445\u0445\u0445LLL\u0445LL.brightness) * (\u0445\u0445L\u0445L\u0445L\u0445LLL\u0445LL - \u0445LL\u0445L\u0445L\u0445LLL\u0445LL);
            if (LLLLL\u0445\u0445\u0445LLL\u0445LL.colorSelectorDragging) {
                float LL\u0445LL\u0445L\u0445LLL\u0445LL = L\u0445L\u0445L\u0445L\u0445LLL\u0445LL - LLL\u0445L\u0445L\u0445LLL\u0445LL;
                float \u0445L\u0445LL\u0445L\u0445LLL\u0445LL = (float)L\u0445LLL\u0445\u0445\u0445LLL\u0445LL - LLL\u0445L\u0445L\u0445LLL\u0445LL;
                LLLLL\u0445\u0445\u0445LLL\u0445LL.saturation = \u0445L\u0445LL\u0445L\u0445LLL\u0445LL / LL\u0445LL\u0445L\u0445LLL\u0445LL;
                LL\u0445\u0445L\u0445L\u0445LLL\u0445LL = \u0445L\u0445LL\u0445L\u0445LLL\u0445LL;
                float L\u0445\u0445LL\u0445L\u0445LLL\u0445LL = \u0445\u0445L\u0445L\u0445L\u0445LLL\u0445LL - \u0445LL\u0445L\u0445L\u0445LLL\u0445LL;
                float \u0445\u0445\u0445LL\u0445L\u0445LLL\u0445LL = (float)\u0445\u0445LLL\u0445\u0445\u0445LLL\u0445LL - \u0445LL\u0445L\u0445L\u0445LLL\u0445LL;
                LLLLL\u0445\u0445\u0445LLL\u0445LL.brightness = 1.0f - \u0445\u0445\u0445LL\u0445L\u0445LLL\u0445LL / L\u0445\u0445LL\u0445L\u0445LLL\u0445LL;
                \u0445L\u0445\u0445L\u0445L\u0445LLL\u0445LL = \u0445\u0445\u0445LL\u0445L\u0445LLL\u0445LL;
                LLLLL\u0445\u0445\u0445LLL\u0445LL.updateColor(Color.HSBtoRGB(LLLLL\u0445\u0445\u0445LLL\u0445LL.hue, LLLLL\u0445\u0445\u0445LLL\u0445LL.saturation, LLLLL\u0445\u0445\u0445LLL\u0445LL.brightness), false);
            }
            Gui.drawRect(LLL\u0445L\u0445L\u0445LLL\u0445LL, \u0445LL\u0445L\u0445L\u0445LLL\u0445LL, L\u0445L\u0445L\u0445L\u0445LLL\u0445LL, \u0445\u0445L\u0445L\u0445L\u0445LLL\u0445LL, -16777216);
            LLLLL\u0445\u0445\u0445LLL\u0445LL.drawColorPickerRect(LLL\u0445L\u0445L\u0445LLL\u0445LL + 0.5f, \u0445LL\u0445L\u0445L\u0445LLL\u0445LL + 0.5f, L\u0445L\u0445L\u0445L\u0445LLL\u0445LL - 0.5f, \u0445\u0445L\u0445L\u0445L\u0445LLL\u0445LL - 0.5f);
            float L\u0445\u0445\u0445L\u0445L\u0445LLL\u0445LL = 2.0f;
            float \u0445\u0445\u0445\u0445L\u0445L\u0445LLL\u0445LL = 0.5f;
            float LLLL\u0445\u0445L\u0445LLL\u0445LL = L\u0445\u0445\u0445L\u0445L\u0445LLL\u0445LL / 2.0f;
            float \u0445LLL\u0445\u0445L\u0445LLL\u0445LL = LLL\u0445L\u0445L\u0445LLL\u0445LL + LL\u0445\u0445L\u0445L\u0445LLL\u0445LL - LLLL\u0445\u0445L\u0445LLL\u0445LL;
            float L\u0445LL\u0445\u0445L\u0445LLL\u0445LL = \u0445LL\u0445L\u0445L\u0445LLL\u0445LL + \u0445L\u0445\u0445L\u0445L\u0445LLL\u0445LL - LLLL\u0445\u0445L\u0445LLL\u0445LL;
            float \u0445\u0445LL\u0445\u0445L\u0445LLL\u0445LL = LLL\u0445L\u0445L\u0445LLL\u0445LL + LL\u0445\u0445L\u0445L\u0445LLL\u0445LL + LLLL\u0445\u0445L\u0445LLL\u0445LL;
            float LL\u0445L\u0445\u0445L\u0445LLL\u0445LL = \u0445LL\u0445L\u0445L\u0445LLL\u0445LL + \u0445L\u0445\u0445L\u0445L\u0445LLL\u0445LL + LLLL\u0445\u0445L\u0445LLL\u0445LL;
            Gui.drawRect(\u0445LLL\u0445\u0445L\u0445LLL\u0445LL - \u0445\u0445\u0445\u0445L\u0445L\u0445LLL\u0445LL, L\u0445LL\u0445\u0445L\u0445LLL\u0445LL - \u0445\u0445\u0445\u0445L\u0445L\u0445LLL\u0445LL, \u0445\u0445LL\u0445\u0445L\u0445LLL\u0445LL + \u0445\u0445\u0445\u0445L\u0445L\u0445LLL\u0445LL, LL\u0445L\u0445\u0445L\u0445LLL\u0445LL + \u0445\u0445\u0445\u0445L\u0445L\u0445LLL\u0445LL, -16777216);
            Gui.drawRect(\u0445LLL\u0445\u0445L\u0445LLL\u0445LL, L\u0445LL\u0445\u0445L\u0445LLL\u0445LL, \u0445\u0445LL\u0445\u0445L\u0445LLL\u0445LL, LL\u0445L\u0445\u0445L\u0445LLL\u0445LL, Color.HSBtoRGB(LLLLL\u0445\u0445\u0445LLL\u0445LL.hue, LLLLL\u0445\u0445\u0445LLL\u0445LL.saturation, LLLLL\u0445\u0445\u0445LLL\u0445LL.brightness));
            float \u0445LL\u0445\u0445\u0445L\u0445LLL\u0445LL = LL\u0445LL\u0445\u0445\u0445LLL\u0445LL + 80 - 1;
            float L\u0445L\u0445\u0445\u0445L\u0445LLL\u0445LL = \u0445L\u0445LL\u0445\u0445\u0445LLL\u0445LL + \u0445\u0445\u0445LL\u0445\u0445\u0445LLL\u0445LL + 2;
            float \u0445\u0445L\u0445\u0445\u0445L\u0445LLL\u0445LL = \u0445LL\u0445\u0445\u0445L\u0445LLL\u0445LL + 5.0f;
            float LL\u0445\u0445\u0445\u0445L\u0445LLL\u0445LL = \u0445L\u0445LL\u0445\u0445\u0445LLL\u0445LL + \u0445\u0445\u0445LL\u0445\u0445\u0445LLL\u0445LL + 80 - 2;
            if ((float)L\u0445LLL\u0445\u0445\u0445LLL\u0445LL <= \u0445LL\u0445\u0445\u0445L\u0445LLL\u0445LL || (float)\u0445\u0445LLL\u0445\u0445\u0445LLL\u0445LL <= L\u0445L\u0445\u0445\u0445L\u0445LLL\u0445LL || (float)L\u0445LLL\u0445\u0445\u0445LLL\u0445LL >= \u0445\u0445L\u0445\u0445\u0445L\u0445LLL\u0445LL || (float)\u0445\u0445LLL\u0445\u0445\u0445LLL\u0445LL >= LL\u0445\u0445\u0445\u0445L\u0445LLL\u0445LL) {
                LLLLL\u0445\u0445\u0445LLL\u0445LL.hueSelectorDragging = false;
            }
            float \u0445L\u0445\u0445\u0445\u0445L\u0445LLL\u0445LL = LLLLL\u0445\u0445\u0445LLL\u0445LL.hue * (LL\u0445\u0445\u0445\u0445L\u0445LLL\u0445LL - L\u0445L\u0445\u0445\u0445L\u0445LLL\u0445LL);
            if (LLLLL\u0445\u0445\u0445LLL\u0445LL.hueSelectorDragging) {
                float \u0445L\u0445L\u0445\u0445L\u0445LLL\u0445LL = LL\u0445\u0445\u0445\u0445L\u0445LLL\u0445LL - L\u0445L\u0445\u0445\u0445L\u0445LLL\u0445LL;
                float L\u0445\u0445L\u0445\u0445L\u0445LLL\u0445LL = (float)\u0445\u0445LLL\u0445\u0445\u0445LLL\u0445LL - L\u0445L\u0445\u0445\u0445L\u0445LLL\u0445LL;
                LLLLL\u0445\u0445\u0445LLL\u0445LL.hue = L\u0445\u0445L\u0445\u0445L\u0445LLL\u0445LL / \u0445L\u0445L\u0445\u0445L\u0445LLL\u0445LL;
                \u0445L\u0445\u0445\u0445\u0445L\u0445LLL\u0445LL = L\u0445\u0445L\u0445\u0445L\u0445LLL\u0445LL;
                LLLLL\u0445\u0445\u0445LLL\u0445LL.updateColor(Color.HSBtoRGB(LLLLL\u0445\u0445\u0445LLL\u0445LL.hue, LLLLL\u0445\u0445\u0445LLL\u0445LL.saturation, LLLLL\u0445\u0445\u0445LLL\u0445LL.brightness), false);
            }
            Gui.drawRect(\u0445LL\u0445\u0445\u0445L\u0445LLL\u0445LL, L\u0445L\u0445\u0445\u0445L\u0445LLL\u0445LL, \u0445\u0445L\u0445\u0445\u0445L\u0445LLL\u0445LL, LL\u0445\u0445\u0445\u0445L\u0445LLL\u0445LL, -16777216);
            float L\u0445\u0445\u0445\u0445\u0445L\u0445LLL\u0445LL = 0.2f;
            float \u0445\u0445\u0445\u0445\u0445\u0445L\u0445LLL\u0445LL = 1.0f / L\u0445\u0445\u0445\u0445\u0445L\u0445LLL\u0445LL;
            float LLLLLL\u0445\u0445LLL\u0445LL = LL\u0445\u0445\u0445\u0445L\u0445LLL\u0445LL - L\u0445L\u0445\u0445\u0445L\u0445LLL\u0445LL;
            float \u0445LLLLL\u0445\u0445LLL\u0445LL = L\u0445L\u0445\u0445\u0445L\u0445LLL\u0445LL + 0.5f;
            float L\u0445LLLL\u0445\u0445LLL\u0445LL = LLLLLL\u0445\u0445LLL\u0445LL / \u0445\u0445\u0445\u0445\u0445\u0445L\u0445LLL\u0445LL;
            int LLL\u0445\u0445\u0445L\u0445LLL\u0445LL = 0;
            if ((float)LLL\u0445\u0445\u0445L\u0445LLL\u0445LL < \u0445\u0445\u0445\u0445\u0445\u0445L\u0445LLL\u0445LL) {
                boolean \u0445\u0445\u0445L\u0445\u0445L\u0445LLL\u0445LL;
                boolean bl2 = \u0445\u0445\u0445L\u0445\u0445L\u0445LLL\u0445LL = (float)LLL\u0445\u0445\u0445L\u0445LLL\u0445LL == \u0445\u0445\u0445\u0445\u0445\u0445L\u0445LLL\u0445LL - 1.0f;
                if (\u0445\u0445\u0445L\u0445\u0445L\u0445LLL\u0445LL) {
                    L\u0445LLLL\u0445\u0445LLL\u0445LL -= 1.0f;
                }
                gui.drawGradientRect(\u0445LL\u0445\u0445\u0445L\u0445LLL\u0445LL + 0.5f, \u0445LLLLL\u0445\u0445LLL\u0445LL, \u0445\u0445L\u0445\u0445\u0445L\u0445LLL\u0445LL - 0.5f, \u0445LLLLL\u0445\u0445LLL\u0445LL + L\u0445LLLL\u0445\u0445LLL\u0445LL, Color.HSBtoRGB(L\u0445\u0445\u0445\u0445\u0445L\u0445LLL\u0445LL * (float)LLL\u0445\u0445\u0445L\u0445LLL\u0445LL, 1.0f, 1.0f), Color.HSBtoRGB(L\u0445\u0445\u0445\u0445\u0445L\u0445LLL\u0445LL * (float)(LLL\u0445\u0445\u0445L\u0445LLL\u0445LL + 1), 1.0f, 1.0f));
                if (!\u0445\u0445\u0445L\u0445\u0445L\u0445LLL\u0445LL) {
                    \u0445LLLLL\u0445\u0445LLL\u0445LL += L\u0445LLLL\u0445\u0445LLL\u0445LL;
                }
                ++LLL\u0445\u0445\u0445L\u0445LLL\u0445LL;
                return;
            }
            float \u0445\u0445LLLL\u0445\u0445LLL\u0445LL = 2.0f;
            float LL\u0445LLL\u0445\u0445LLL\u0445LL = 0.5f;
            float \u0445L\u0445LLL\u0445\u0445LLL\u0445LL = \u0445\u0445LLLL\u0445\u0445LLL\u0445LL / 2.0f;
            float L\u0445\u0445LLL\u0445\u0445LLL\u0445LL = L\u0445L\u0445\u0445\u0445L\u0445LLL\u0445LL + \u0445L\u0445\u0445\u0445\u0445L\u0445LLL\u0445LL - \u0445L\u0445LLL\u0445\u0445LLL\u0445LL;
            float \u0445\u0445\u0445LLL\u0445\u0445LLL\u0445LL = L\u0445L\u0445\u0445\u0445L\u0445LLL\u0445LL + \u0445L\u0445\u0445\u0445\u0445L\u0445LLL\u0445LL + \u0445L\u0445LLL\u0445\u0445LLL\u0445LL;
            Gui.drawRect(\u0445LL\u0445\u0445\u0445L\u0445LLL\u0445LL - LL\u0445LLL\u0445\u0445LLL\u0445LL, L\u0445\u0445LLL\u0445\u0445LLL\u0445LL - LL\u0445LLL\u0445\u0445LLL\u0445LL, \u0445\u0445L\u0445\u0445\u0445L\u0445LLL\u0445LL + LL\u0445LLL\u0445\u0445LLL\u0445LL, \u0445\u0445\u0445LLL\u0445\u0445LLL\u0445LL + LL\u0445LLL\u0445\u0445LLL\u0445LL, -16777216);
            Gui.drawRect(\u0445LL\u0445\u0445\u0445L\u0445LLL\u0445LL, L\u0445\u0445LLL\u0445\u0445LLL\u0445LL, \u0445\u0445L\u0445\u0445\u0445L\u0445LLL\u0445LL, \u0445\u0445\u0445LLL\u0445\u0445LLL\u0445LL, Color.HSBtoRGB(LLLLL\u0445\u0445\u0445LLL\u0445LL.hue, 1.0f, 1.0f));
            float L\u0445L\u0445LL\u0445\u0445LLL\u0445LL = LL\u0445LL\u0445\u0445\u0445LLL\u0445LL + 80 + 6;
            float \u0445\u0445L\u0445LL\u0445\u0445LLL\u0445LL = \u0445L\u0445LL\u0445\u0445\u0445LLL\u0445LL + \u0445\u0445\u0445LL\u0445\u0445\u0445LLL\u0445LL + 2;
            float LL\u0445\u0445LL\u0445\u0445LLL\u0445LL = L\u0445L\u0445LL\u0445\u0445LLL\u0445LL + 5.0f;
            float \u0445L\u0445\u0445LL\u0445\u0445LLL\u0445LL = \u0445L\u0445LL\u0445\u0445\u0445LLL\u0445LL + \u0445\u0445\u0445LL\u0445\u0445\u0445LLL\u0445LL + 80 - 2;
            if ((float)L\u0445LLL\u0445\u0445\u0445LLL\u0445LL <= L\u0445L\u0445LL\u0445\u0445LLL\u0445LL || (float)\u0445\u0445LLL\u0445\u0445\u0445LLL\u0445LL <= \u0445\u0445L\u0445LL\u0445\u0445LLL\u0445LL || (float)L\u0445LLL\u0445\u0445\u0445LLL\u0445LL >= LL\u0445\u0445LL\u0445\u0445LLL\u0445LL || (float)\u0445\u0445LLL\u0445\u0445\u0445LLL\u0445LL >= \u0445L\u0445\u0445LL\u0445\u0445LLL\u0445LL) {
                LLLLL\u0445\u0445\u0445LLL\u0445LL.alphaSelectorDragging = false;
            }
            int L\u0445\u0445\u0445LL\u0445\u0445LLL\u0445LL = Color.HSBtoRGB(LLLLL\u0445\u0445\u0445LLL\u0445LL.hue, LLLLL\u0445\u0445\u0445LLL\u0445LL.saturation, LLLLL\u0445\u0445\u0445LLL\u0445LL.brightness);
            int \u0445\u0445\u0445\u0445LL\u0445\u0445LLL\u0445LL = L\u0445\u0445\u0445LL\u0445\u0445LLL\u0445LL >> 16 & 0xFF;
            int LLLL\u0445L\u0445\u0445LLL\u0445LL = L\u0445\u0445\u0445LL\u0445\u0445LLL\u0445LL >> 8 & 0xFF;
            int \u0445LLL\u0445L\u0445\u0445LLL\u0445LL = L\u0445\u0445\u0445LL\u0445\u0445LLL\u0445LL & 0xFF;
            float L\u0445LL\u0445L\u0445\u0445LLL\u0445LL = LLLLL\u0445\u0445\u0445LLL\u0445LL.alpha * (\u0445L\u0445\u0445LL\u0445\u0445LLL\u0445LL - \u0445\u0445L\u0445LL\u0445\u0445LLL\u0445LL);
            if (LLLLL\u0445\u0445\u0445LLL\u0445LL.alphaSelectorDragging) {
                float LLL\u0445LL\u0445\u0445LLL\u0445LL = \u0445L\u0445\u0445LL\u0445\u0445LLL\u0445LL - \u0445\u0445L\u0445LL\u0445\u0445LLL\u0445LL;
                float \u0445LL\u0445LL\u0445\u0445LLL\u0445LL = (float)\u0445\u0445LLL\u0445\u0445\u0445LLL\u0445LL - \u0445\u0445L\u0445LL\u0445\u0445LLL\u0445LL;
                LLLLL\u0445\u0445\u0445LLL\u0445LL.alpha = \u0445LL\u0445LL\u0445\u0445LLL\u0445LL / LLL\u0445LL\u0445\u0445LLL\u0445LL;
                L\u0445LL\u0445L\u0445\u0445LLL\u0445LL = \u0445LL\u0445LL\u0445\u0445LLL\u0445LL;
                LLLLL\u0445\u0445\u0445LLL\u0445LL.updateColor(new Color(\u0445\u0445\u0445\u0445LL\u0445\u0445LLL\u0445LL, LLLL\u0445L\u0445\u0445LLL\u0445LL, \u0445LLL\u0445L\u0445\u0445LLL\u0445LL, (int)(LLLLL\u0445\u0445\u0445LLL\u0445LL.alpha * 255.0f)).getRGB(), true);
            }
            Gui.drawRect(L\u0445L\u0445LL\u0445\u0445LLL\u0445LL, \u0445\u0445L\u0445LL\u0445\u0445LLL\u0445LL, LL\u0445\u0445LL\u0445\u0445LLL\u0445LL, \u0445L\u0445\u0445LL\u0445\u0445LLL\u0445LL, -16777216);
            LLLLL\u0445\u0445\u0445LLL\u0445LL.drawCheckeredBackground(L\u0445L\u0445LL\u0445\u0445LLL\u0445LL + 0.5f, \u0445\u0445L\u0445LL\u0445\u0445LLL\u0445LL + 0.5f, LL\u0445\u0445LL\u0445\u0445LLL\u0445LL - 0.5f, \u0445L\u0445\u0445LL\u0445\u0445LLL\u0445LL - 0.5f);
            gui.drawGradientRect(L\u0445L\u0445LL\u0445\u0445LLL\u0445LL + 0.5f, \u0445\u0445L\u0445LL\u0445\u0445LLL\u0445LL + 0.5f, LL\u0445\u0445LL\u0445\u0445LLL\u0445LL - 0.5f, \u0445L\u0445\u0445LL\u0445\u0445LLL\u0445LL - 0.5f, new Color(\u0445\u0445\u0445\u0445LL\u0445\u0445LLL\u0445LL, LLLL\u0445L\u0445\u0445LLL\u0445LL, \u0445LLL\u0445L\u0445\u0445LLL\u0445LL, 0).getRGB(), new Color(\u0445\u0445\u0445\u0445LL\u0445\u0445LLL\u0445LL, LLLL\u0445L\u0445\u0445LLL\u0445LL, \u0445LLL\u0445L\u0445\u0445LLL\u0445LL, 255).getRGB());
            float \u0445\u0445LL\u0445L\u0445\u0445LLL\u0445LL = 2.0f;
            float LL\u0445L\u0445L\u0445\u0445LLL\u0445LL = 0.5f;
            float \u0445L\u0445L\u0445L\u0445\u0445LLL\u0445LL = \u0445\u0445LL\u0445L\u0445\u0445LLL\u0445LL / 2.0f;
            float L\u0445\u0445L\u0445L\u0445\u0445LLL\u0445LL = \u0445\u0445L\u0445LL\u0445\u0445LLL\u0445LL + L\u0445LL\u0445L\u0445\u0445LLL\u0445LL - \u0445L\u0445L\u0445L\u0445\u0445LLL\u0445LL;
            float \u0445\u0445\u0445L\u0445L\u0445\u0445LLL\u0445LL = \u0445\u0445L\u0445LL\u0445\u0445LLL\u0445LL + L\u0445LL\u0445L\u0445\u0445LLL\u0445LL + \u0445L\u0445L\u0445L\u0445\u0445LLL\u0445LL;
            float LLL\u0445\u0445L\u0445\u0445LLL\u0445LL = LL\u0445\u0445LL\u0445\u0445LLL\u0445LL + LL\u0445L\u0445L\u0445\u0445LLL\u0445LL;
            float \u0445LL\u0445\u0445L\u0445\u0445LLL\u0445LL = L\u0445\u0445L\u0445L\u0445\u0445LLL\u0445LL - LL\u0445L\u0445L\u0445\u0445LLL\u0445LL;
            float L\u0445L\u0445\u0445L\u0445\u0445LLL\u0445LL = \u0445\u0445\u0445L\u0445L\u0445\u0445LLL\u0445LL + LL\u0445L\u0445L\u0445\u0445LLL\u0445LL;
            GL11.glDisable(3553);
            RenderHelper.setColor(-16777216);
            GL11.glBegin(2);
            GL11.glVertex2f(L\u0445L\u0445LL\u0445\u0445LLL\u0445LL, \u0445LL\u0445\u0445L\u0445\u0445LLL\u0445LL);
            GL11.glVertex2f(L\u0445L\u0445LL\u0445\u0445LLL\u0445LL, L\u0445L\u0445\u0445L\u0445\u0445LLL\u0445LL);
            GL11.glVertex2f(LLL\u0445\u0445L\u0445\u0445LLL\u0445LL, L\u0445L\u0445\u0445L\u0445\u0445LLL\u0445LL);
            GL11.glVertex2f(LLL\u0445\u0445L\u0445\u0445LLL\u0445LL, \u0445LL\u0445\u0445L\u0445\u0445LLL\u0445LL);
            GL11.glEnd();
            GL11.glEnable(3553);
            float \u0445\u0445L\u0445\u0445L\u0445\u0445LLL\u0445LL = 94.0f;
            float LL\u0445\u0445\u0445L\u0445\u0445LLL\u0445LL = (float)LL\u0445LL\u0445\u0445\u0445LLL\u0445LL + \u0445\u0445L\u0445\u0445L\u0445\u0445LLL\u0445LL + 7.0f;
            float \u0445L\u0445\u0445\u0445L\u0445\u0445LLL\u0445LL = \u0445L\u0445LL\u0445\u0445\u0445LLL\u0445LL + \u0445\u0445\u0445LL\u0445\u0445\u0445LLL\u0445LL + 2;
            float L\u0445\u0445\u0445\u0445L\u0445\u0445LLL\u0445LL = LL\u0445\u0445\u0445L\u0445\u0445LLL\u0445LL + (float)L\u0445\u0445LL\u0445\u0445\u0445LLL\u0445LL - \u0445\u0445L\u0445\u0445L\u0445\u0445LLL\u0445LL - 7.0f;
            float \u0445\u0445\u0445\u0445\u0445L\u0445\u0445LLL\u0445LL = (float)(\u0445L\u0445LL\u0445\u0445\u0445LLL\u0445LL + \u0445\u0445\u0445LL\u0445\u0445\u0445LLL\u0445LL) + 40.0f + 8.0f;
            RectHelper.drawRect(LL\u0445\u0445\u0445L\u0445\u0445LLL\u0445LL, \u0445L\u0445\u0445\u0445L\u0445\u0445LLL\u0445LL, L\u0445\u0445\u0445\u0445L\u0445\u0445LLL\u0445LL, \u0445\u0445\u0445\u0445\u0445L\u0445\u0445LLL\u0445LL + 31.0f, -16777216);
            LLLLL\u0445\u0445\u0445LLL\u0445LL.drawCheckeredBackground(LL\u0445\u0445\u0445L\u0445\u0445LLL\u0445LL + 0.5f, \u0445L\u0445\u0445\u0445L\u0445\u0445LLL\u0445LL + 0.5f, L\u0445\u0445\u0445\u0445L\u0445\u0445LLL\u0445LL - 0.5f, \u0445\u0445\u0445\u0445\u0445L\u0445\u0445LLL\u0445LL + 30.0f);
            RectHelper.drawRect(LL\u0445\u0445\u0445L\u0445\u0445LLL\u0445LL + 3.0f, \u0445L\u0445\u0445\u0445L\u0445\u0445LLL\u0445LL + 4.0f, L\u0445\u0445\u0445\u0445L\u0445\u0445LLL\u0445LL - 3.0f, \u0445\u0445\u0445\u0445\u0445L\u0445\u0445LLL\u0445LL + 28.0f, LLLLL\u0445\u0445\u0445LLL\u0445LL.colorSetting.getColorValue());
        }
    }

    private void drawCheckeredBackground(float LL\u0445L\u0445LLL\u0445LL\u0445LL, float \u0445L\u0445L\u0445LLL\u0445LL\u0445LL, float L\u0445\u0445L\u0445LLL\u0445LL\u0445LL, float \u0445\u0445\u0445L\u0445LLL\u0445LL\u0445LL) {
        RectHelper.drawRect(LL\u0445L\u0445LLL\u0445LL\u0445LL, \u0445L\u0445L\u0445LLL\u0445LL\u0445LL, L\u0445\u0445L\u0445LLL\u0445LL\u0445LL, \u0445\u0445\u0445L\u0445LLL\u0445LL\u0445LL, -1);
        boolean L\u0445LL\u0445LLL\u0445LL\u0445LL = false;
        if (\u0445L\u0445L\u0445LLL\u0445LL\u0445LL < \u0445\u0445\u0445L\u0445LLL\u0445LL\u0445LL) {
            float \u0445LLL\u0445LLL\u0445LL\u0445LL = LL\u0445L\u0445LLL\u0445LL\u0445LL + (float)((L\u0445LL\u0445LLL\u0445LL\u0445LL = !L\u0445LL\u0445LLL\u0445LL\u0445LL) ? 1 : 0);
            if (\u0445LLL\u0445LLL\u0445LL\u0445LL < L\u0445\u0445L\u0445LLL\u0445LL\u0445LL) {
                RectHelper.drawRect(\u0445LLL\u0445LLL\u0445LL\u0445LL, \u0445L\u0445L\u0445LLL\u0445LL\u0445LL, \u0445LLL\u0445LLL\u0445LL\u0445LL + 1.0f, \u0445L\u0445L\u0445LLL\u0445LL\u0445LL + 1.0f, -8355712);
                \u0445LLL\u0445LLL\u0445LL\u0445LL += 2.0f;
                return;
            }
            \u0445L\u0445L\u0445LLL\u0445LL\u0445LL += 1.0f;
            return;
        }
    }

    private void updateColor(int L\u0445LLL\u0445LL\u0445LL\u0445LL, boolean \u0445\u0445LLL\u0445LL\u0445LL\u0445LL) {
        ColorPickerComponent \u0445LLLL\u0445LL\u0445LL\u0445LL;
        if (\u0445\u0445LLL\u0445LL\u0445LL\u0445LL) {
            \u0445LLLL\u0445LL\u0445LL\u0445LL.colorSetting.setColorValue(L\u0445LLL\u0445LL\u0445LL\u0445LL);
        } else {
            \u0445LLLL\u0445LL\u0445LL\u0445LL.colorSetting.setColorValue(new Color(L\u0445LLL\u0445LL\u0445LL\u0445LL >> 16 & 0xFF, L\u0445LLL\u0445LL\u0445LL\u0445LL >> 8 & 0xFF, L\u0445LLL\u0445LL\u0445LL\u0445LL & 0xFF, (int)(\u0445LLLL\u0445LL\u0445LL\u0445LL.alpha * 255.0f)).getRGB());
        }
    }

    @Override
    public void onMouseClick(int LLL\u0445LL\u0445L\u0445LL\u0445LL, int \u0445LL\u0445LL\u0445L\u0445LL\u0445LL, int L\u0445L\u0445LL\u0445L\u0445LL\u0445LL) {
        ColorPickerComponent \u0445\u0445\u0445LLL\u0445L\u0445LL\u0445LL;
        super.onMouseClick(LLL\u0445LL\u0445L\u0445LL\u0445LL, \u0445LL\u0445LL\u0445L\u0445LL\u0445LL, L\u0445L\u0445LL\u0445L\u0445LL\u0445LL);
        if (\u0445\u0445\u0445LLL\u0445L\u0445LL\u0445LL.isExpanded() && L\u0445L\u0445LL\u0445L\u0445LL\u0445LL == 0) {
            int \u0445LL\u0445\u0445\u0445LL\u0445LL\u0445LL = \u0445\u0445\u0445LLL\u0445L\u0445LL\u0445LL.getX();
            int L\u0445L\u0445\u0445\u0445LL\u0445LL\u0445LL = \u0445\u0445\u0445LLL\u0445L\u0445LL\u0445LL.getY();
            float \u0445\u0445L\u0445\u0445\u0445LL\u0445LL\u0445LL = \u0445LL\u0445\u0445\u0445LL\u0445LL\u0445LL + 2;
            float LL\u0445\u0445\u0445\u0445LL\u0445LL\u0445LL = L\u0445L\u0445\u0445\u0445LL\u0445LL\u0445LL + \u0445\u0445\u0445LLL\u0445L\u0445LL\u0445LL.getHeight() + 2;
            float \u0445L\u0445\u0445\u0445\u0445LL\u0445LL\u0445LL = \u0445LL\u0445\u0445\u0445LL\u0445LL\u0445LL + 80 - 2;
            float L\u0445\u0445\u0445\u0445\u0445LL\u0445LL\u0445LL = L\u0445L\u0445\u0445\u0445LL\u0445LL\u0445LL + \u0445\u0445\u0445LLL\u0445L\u0445LL\u0445LL.getHeight() + 80 - 2;
            float \u0445\u0445\u0445\u0445\u0445\u0445LL\u0445LL\u0445LL = \u0445LL\u0445\u0445\u0445LL\u0445LL\u0445LL + 80 - 1;
            float LLLLLL\u0445L\u0445LL\u0445LL = L\u0445L\u0445\u0445\u0445LL\u0445LL\u0445LL + \u0445\u0445\u0445LLL\u0445L\u0445LL\u0445LL.getHeight() + 2;
            float \u0445LLLLL\u0445L\u0445LL\u0445LL = \u0445\u0445\u0445\u0445\u0445\u0445LL\u0445LL\u0445LL + 5.0f;
            float L\u0445LLLL\u0445L\u0445LL\u0445LL = L\u0445L\u0445\u0445\u0445LL\u0445LL\u0445LL + \u0445\u0445\u0445LLL\u0445L\u0445LL\u0445LL.getHeight() + 80 - 2;
            float \u0445\u0445LLLL\u0445L\u0445LL\u0445LL = \u0445LL\u0445\u0445\u0445LL\u0445LL\u0445LL + 80 + 6;
            float LL\u0445LLL\u0445L\u0445LL\u0445LL = L\u0445L\u0445\u0445\u0445LL\u0445LL\u0445LL + \u0445\u0445\u0445LLL\u0445L\u0445LL\u0445LL.getHeight() + 2;
            float \u0445L\u0445LLL\u0445L\u0445LL\u0445LL = \u0445\u0445LLLL\u0445L\u0445LL\u0445LL + 5.0f;
            float L\u0445\u0445LLL\u0445L\u0445LL\u0445LL = L\u0445L\u0445\u0445\u0445LL\u0445LL\u0445LL + \u0445\u0445\u0445LLL\u0445L\u0445LL\u0445LL.getHeight() + 80 - 2;
            \u0445\u0445\u0445LLL\u0445L\u0445LL\u0445LL.colorSelectorDragging = !\u0445\u0445\u0445LLL\u0445L\u0445LL\u0445LL.colorSelectorDragging && (float)LLL\u0445LL\u0445L\u0445LL\u0445LL > \u0445\u0445L\u0445\u0445\u0445LL\u0445LL\u0445LL && (float)\u0445LL\u0445LL\u0445L\u0445LL\u0445LL > LL\u0445\u0445\u0445\u0445LL\u0445LL\u0445LL && (float)LLL\u0445LL\u0445L\u0445LL\u0445LL < \u0445L\u0445\u0445\u0445\u0445LL\u0445LL\u0445LL && (float)\u0445LL\u0445LL\u0445L\u0445LL\u0445LL < L\u0445\u0445\u0445\u0445\u0445LL\u0445LL\u0445LL;
            \u0445\u0445\u0445LLL\u0445L\u0445LL\u0445LL.hueSelectorDragging = !\u0445\u0445\u0445LLL\u0445L\u0445LL\u0445LL.hueSelectorDragging && (float)LLL\u0445LL\u0445L\u0445LL\u0445LL > \u0445\u0445\u0445\u0445\u0445\u0445LL\u0445LL\u0445LL && (float)\u0445LL\u0445LL\u0445L\u0445LL\u0445LL > LLLLLL\u0445L\u0445LL\u0445LL && (float)LLL\u0445LL\u0445L\u0445LL\u0445LL < \u0445LLLLL\u0445L\u0445LL\u0445LL && (float)\u0445LL\u0445LL\u0445L\u0445LL\u0445LL < L\u0445LLLL\u0445L\u0445LL\u0445LL;
            \u0445\u0445\u0445LLL\u0445L\u0445LL\u0445LL.alphaSelectorDragging = !\u0445\u0445\u0445LLL\u0445L\u0445LL\u0445LL.alphaSelectorDragging && (float)LLL\u0445LL\u0445L\u0445LL\u0445LL > \u0445\u0445LLLL\u0445L\u0445LL\u0445LL && (float)\u0445LL\u0445LL\u0445L\u0445LL\u0445LL > LL\u0445LLL\u0445L\u0445LL\u0445LL && (float)LLL\u0445LL\u0445L\u0445LL\u0445LL < \u0445L\u0445LLL\u0445L\u0445LL\u0445LL && (float)\u0445LL\u0445LL\u0445L\u0445LL\u0445LL < L\u0445\u0445LLL\u0445L\u0445LL\u0445LL;
        }
    }

    @Override
    public void onMouseRelease(int \u0445\u0445\u0445\u0445\u0445L\u0445L\u0445LL\u0445LL) {
        ColorPickerComponent L\u0445\u0445\u0445\u0445L\u0445L\u0445LL\u0445LL;
        if (L\u0445\u0445\u0445\u0445L\u0445L\u0445LL\u0445LL.hueSelectorDragging) {
            L\u0445\u0445\u0445\u0445L\u0445L\u0445LL\u0445LL.hueSelectorDragging = false;
        } else if (L\u0445\u0445\u0445\u0445L\u0445L\u0445LL\u0445LL.colorSelectorDragging) {
            L\u0445\u0445\u0445\u0445L\u0445L\u0445LL\u0445LL.colorSelectorDragging = false;
        } else if (L\u0445\u0445\u0445\u0445L\u0445L\u0445LL\u0445LL.alphaSelectorDragging) {
            L\u0445\u0445\u0445\u0445L\u0445L\u0445LL\u0445LL.alphaSelectorDragging = false;
        }
    }

    private float[] getHSBFromColor(int L\u0445\u0445LL\u0445\u0445L\u0445LL\u0445LL) {
        int \u0445\u0445\u0445LL\u0445\u0445L\u0445LL\u0445LL = L\u0445\u0445LL\u0445\u0445L\u0445LL\u0445LL >> 16 & 0xFF;
        int LLL\u0445L\u0445\u0445L\u0445LL\u0445LL = L\u0445\u0445LL\u0445\u0445L\u0445LL\u0445LL >> 8 & 0xFF;
        int \u0445LL\u0445L\u0445\u0445L\u0445LL\u0445LL = L\u0445\u0445LL\u0445\u0445L\u0445LL\u0445LL & 0xFF;
        return Color.RGBtoHSB(\u0445\u0445\u0445LL\u0445\u0445L\u0445LL\u0445LL, LLL\u0445L\u0445\u0445L\u0445LL\u0445LL, \u0445LL\u0445L\u0445\u0445L\u0445LL\u0445LL, null);
    }

    public void drawColorPickerRect(float \u0445L\u0445L\u0445\u0445\u0445L\u0445LL\u0445LL, float L\u0445\u0445L\u0445\u0445\u0445L\u0445LL\u0445LL, float \u0445\u0445\u0445L\u0445\u0445\u0445L\u0445LL\u0445LL, float LLL\u0445\u0445\u0445\u0445L\u0445LL\u0445LL) {
        ColorPickerComponent LL\u0445L\u0445\u0445\u0445L\u0445LL\u0445LL;
        int \u0445LL\u0445\u0445\u0445\u0445L\u0445LL\u0445LL = Color.HSBtoRGB(LL\u0445L\u0445\u0445\u0445L\u0445LL\u0445LL.hue, 1.0f, 1.0f);
        GL11.glDisable(3553);
        GlStateManager.enableBlend();
        GL11.glShadeModel(7425);
        buffer.begin(7, DefaultVertexFormats.POSITION_COLOR);
        buffer.pos(\u0445\u0445\u0445L\u0445\u0445\u0445L\u0445LL\u0445LL, L\u0445\u0445L\u0445\u0445\u0445L\u0445LL\u0445LL, 0.0).color(\u0445LL\u0445\u0445\u0445\u0445L\u0445LL\u0445LL).endVertex();
        buffer.pos(\u0445L\u0445L\u0445\u0445\u0445L\u0445LL\u0445LL, L\u0445\u0445L\u0445\u0445\u0445L\u0445LL\u0445LL, 0.0).color(-1).endVertex();
        buffer.pos(\u0445L\u0445L\u0445\u0445\u0445L\u0445LL\u0445LL, LLL\u0445\u0445\u0445\u0445L\u0445LL\u0445LL, 0.0).color(-1).endVertex();
        buffer.pos(\u0445\u0445\u0445L\u0445\u0445\u0445L\u0445LL\u0445LL, LLL\u0445\u0445\u0445\u0445L\u0445LL\u0445LL, 0.0).color(\u0445LL\u0445\u0445\u0445\u0445L\u0445LL\u0445LL).endVertex();
        tessellator.draw();
        buffer.begin(7, DefaultVertexFormats.POSITION_COLOR);
        buffer.pos(\u0445\u0445\u0445L\u0445\u0445\u0445L\u0445LL\u0445LL, L\u0445\u0445L\u0445\u0445\u0445L\u0445LL\u0445LL, 0.0).color(0x18000000).endVertex();
        buffer.pos(\u0445L\u0445L\u0445\u0445\u0445L\u0445LL\u0445LL, L\u0445\u0445L\u0445\u0445\u0445L\u0445LL\u0445LL, 0.0).color(0x18000000).endVertex();
        buffer.pos(\u0445L\u0445L\u0445\u0445\u0445L\u0445LL\u0445LL, LLL\u0445\u0445\u0445\u0445L\u0445LL\u0445LL, 0.0).color(-16777216).endVertex();
        buffer.pos(\u0445\u0445\u0445L\u0445\u0445\u0445L\u0445LL\u0445LL, LLL\u0445\u0445\u0445\u0445L\u0445LL\u0445LL, 0.0).color(-16777216).endVertex();
        tessellator.draw();
        GlStateManager.disableBlend();
        GL11.glShadeModel(7425);
        GL11.glEnable(3553);
    }

    @Override
    public boolean canExpand() {
        return true;
    }

    @Override
    public int getHeightWithExpand() {
        ColorPickerComponent L\u0445LLLLL\u0445\u0445LL\u0445LL;
        return L\u0445LLLLL\u0445\u0445LL\u0445LL.getHeight() + 80;
    }

    @Override
    public void onPress(int \u0445L\u0445LLLL\u0445\u0445LL\u0445LL, int L\u0445\u0445LLLL\u0445\u0445LL\u0445LL, int \u0445\u0445\u0445LLLL\u0445\u0445LL\u0445LL) {
    }

    @Override
    public Setting getSetting() {
        ColorPickerComponent \u0445LL\u0445LLL\u0445\u0445LL\u0445LL;
        return \u0445LL\u0445LLL\u0445\u0445LL\u0445LL.colorSetting;
    }
}

