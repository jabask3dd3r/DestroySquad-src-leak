/*
 * Decompiled with CFR 0.152.
 */
package org.Destroy.client.helpers.render;

import java.awt.Color;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.Gui;
import net.minecraft.client.gui.ScaledResolution;
import net.minecraft.client.renderer.BufferBuilder;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.OpenGlHelper;
import net.minecraft.client.renderer.Tessellator;
import net.minecraft.client.renderer.culling.Frustum;
import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
import net.minecraft.entity.Entity;
import net.minecraft.item.ItemStack;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.util.math.BlockPos;
import org.Destroy.client.helpers.Helper;
import org.lwjgl.opengl.GL11;

public class RenderHelper
implements Helper {
    public static Frustum frustum = new Frustum();

    public RenderHelper() {
        RenderHelper LLLL\u0445\u0445L\u0445\u0445L\u0445LL;
    }

    public static void scissorRect(float L\u0445L\u0445\u0445\u0445L\u0445\u0445L\u0445LL, float LL\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445LL, float L\u0445\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445LL, double \u0445\u0445\u0445\u0445L\u0445\u0445\u0445\u0445L\u0445LL) {
        ScaledResolution LLLL\u0445\u0445\u0445\u0445\u0445L\u0445LL = new ScaledResolution(mc);
        int \u0445LLL\u0445\u0445\u0445\u0445\u0445L\u0445LL = LLLL\u0445\u0445\u0445\u0445\u0445L\u0445LL.getScaleFactor();
        GL11.glScissor((int)(L\u0445L\u0445\u0445\u0445L\u0445\u0445L\u0445LL * (float)\u0445LLL\u0445\u0445\u0445\u0445\u0445L\u0445LL), (int)(((double)LLLL\u0445\u0445\u0445\u0445\u0445L\u0445LL.getScaledHeight() - \u0445\u0445\u0445\u0445L\u0445\u0445\u0445\u0445L\u0445LL) * (double)\u0445LLL\u0445\u0445\u0445\u0445\u0445L\u0445LL), (int)((L\u0445\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445LL - L\u0445L\u0445\u0445\u0445L\u0445\u0445L\u0445LL) * (float)\u0445LLL\u0445\u0445\u0445\u0445\u0445L\u0445LL), (int)((\u0445\u0445\u0445\u0445L\u0445\u0445\u0445\u0445L\u0445LL - (double)LL\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445LL) * (double)\u0445LLL\u0445\u0445\u0445\u0445\u0445L\u0445LL));
    }

    public static int darker(int L\u0445L\u0445LLLLL\u0445\u0445LL, float \u0445\u0445L\u0445LLLLL\u0445\u0445LL) {
        int LL\u0445\u0445LLLLL\u0445\u0445LL = (int)((float)(L\u0445L\u0445LLLLL\u0445\u0445LL >> 16 & 0xFF) * \u0445\u0445L\u0445LLLLL\u0445\u0445LL);
        int \u0445L\u0445\u0445LLLLL\u0445\u0445LL = (int)((float)(L\u0445L\u0445LLLLL\u0445\u0445LL >> 8 & 0xFF) * \u0445\u0445L\u0445LLLLL\u0445\u0445LL);
        int L\u0445\u0445\u0445LLLLL\u0445\u0445LL = (int)((float)(L\u0445L\u0445LLLLL\u0445\u0445LL & 0xFF) * \u0445\u0445L\u0445LLLLL\u0445\u0445LL);
        int \u0445\u0445\u0445\u0445LLLLL\u0445\u0445LL = L\u0445L\u0445LLLLL\u0445\u0445LL >> 24 & 0xFF;
        return (LL\u0445\u0445LLLLL\u0445\u0445LL & 0xFF) << 16 | (\u0445L\u0445\u0445LLLLL\u0445\u0445LL & 0xFF) << 8 | L\u0445\u0445\u0445LLLLL\u0445\u0445LL & 0xFF | (\u0445\u0445\u0445\u0445LLLLL\u0445\u0445LL & 0xFF) << 24;
    }

    public static void setColor(int \u0445L\u0445\u0445\u0445LLLL\u0445\u0445LL) {
        GL11.glColor4ub((byte)(\u0445L\u0445\u0445\u0445LLLL\u0445\u0445LL >> 16 & 0xFF), (byte)(\u0445L\u0445\u0445\u0445LLLL\u0445\u0445LL >> 8 & 0xFF), (byte)(\u0445L\u0445\u0445\u0445LLLL\u0445\u0445LL & 0xFF), (byte)(\u0445L\u0445\u0445\u0445LLLL\u0445\u0445LL >> 24 & 0xFF));
    }

    public static void setColor(Color LL\u0445\u0445L\u0445LLL\u0445\u0445LL, float L\u0445\u0445\u0445L\u0445LLL\u0445\u0445LL) {
        float LLLL\u0445\u0445LLL\u0445\u0445LL = (float)LL\u0445\u0445L\u0445LLL\u0445\u0445LL.getRed() / 255.0f;
        float L\u0445LL\u0445\u0445LLL\u0445\u0445LL = (float)LL\u0445\u0445L\u0445LLL\u0445\u0445LL.getGreen() / 255.0f;
        float \u0445\u0445LL\u0445\u0445LLL\u0445\u0445LL = (float)LL\u0445\u0445L\u0445LLL\u0445\u0445LL.getBlue() / 255.0f;
        GlStateManager.color(LLLL\u0445\u0445LLL\u0445\u0445LL, L\u0445LL\u0445\u0445LLL\u0445\u0445LL, \u0445\u0445LL\u0445\u0445LLL\u0445\u0445LL, L\u0445\u0445\u0445L\u0445LLL\u0445\u0445LL);
    }

    public static void drawEntityBox(Entity \u0445\u0445\u0445\u0445LL\u0445LL\u0445\u0445LL, Color \u0445LLL\u0445L\u0445LL\u0445\u0445LL, boolean \u0445\u0445LL\u0445L\u0445LL\u0445\u0445LL, float \u0445L\u0445L\u0445L\u0445LL\u0445\u0445LL) {
        GlStateManager.pushMatrix();
        GlStateManager.blendFunc(770, 771);
        GL11.glEnable(3042);
        GlStateManager.glLineWidth(2.0f);
        GlStateManager.disableTexture2D();
        GL11.glDisable(2929);
        GlStateManager.depthMask(false);
        double \u0445\u0445\u0445L\u0445L\u0445LL\u0445\u0445LL = \u0445\u0445\u0445\u0445LL\u0445LL\u0445\u0445LL.lastTickPosX + (\u0445\u0445\u0445\u0445LL\u0445LL\u0445\u0445LL.posX - \u0445\u0445\u0445\u0445LL\u0445LL\u0445\u0445LL.lastTickPosX) * (double)RenderHelper.mc.timer.renderPartialTicks - RenderHelper.mc.getRenderManager().renderPosX;
        double LLL\u0445\u0445L\u0445LL\u0445\u0445LL = \u0445\u0445\u0445\u0445LL\u0445LL\u0445\u0445LL.lastTickPosY + (\u0445\u0445\u0445\u0445LL\u0445LL\u0445\u0445LL.posY - \u0445\u0445\u0445\u0445LL\u0445LL\u0445\u0445LL.lastTickPosY) * (double)RenderHelper.mc.timer.renderPartialTicks - RenderHelper.mc.getRenderManager().renderPosY;
        double \u0445LL\u0445\u0445L\u0445LL\u0445\u0445LL = \u0445\u0445\u0445\u0445LL\u0445LL\u0445\u0445LL.lastTickPosZ + (\u0445\u0445\u0445\u0445LL\u0445LL\u0445\u0445LL.posZ - \u0445\u0445\u0445\u0445LL\u0445LL\u0445\u0445LL.lastTickPosZ) * (double)RenderHelper.mc.timer.renderPartialTicks - RenderHelper.mc.getRenderManager().renderPosZ;
        AxisAlignedBB L\u0445L\u0445\u0445L\u0445LL\u0445\u0445LL = \u0445\u0445\u0445\u0445LL\u0445LL\u0445\u0445LL.getEntityBoundingBox();
        AxisAlignedBB \u0445\u0445L\u0445\u0445L\u0445LL\u0445\u0445LL = new AxisAlignedBB(L\u0445L\u0445\u0445L\u0445LL\u0445\u0445LL.minX - \u0445\u0445\u0445\u0445LL\u0445LL\u0445\u0445LL.posX + \u0445\u0445\u0445L\u0445L\u0445LL\u0445\u0445LL - 0.05, L\u0445L\u0445\u0445L\u0445LL\u0445\u0445LL.minY - \u0445\u0445\u0445\u0445LL\u0445LL\u0445\u0445LL.posY + LLL\u0445\u0445L\u0445LL\u0445\u0445LL, L\u0445L\u0445\u0445L\u0445LL\u0445\u0445LL.minZ - \u0445\u0445\u0445\u0445LL\u0445LL\u0445\u0445LL.posZ + \u0445LL\u0445\u0445L\u0445LL\u0445\u0445LL - 0.05, L\u0445L\u0445\u0445L\u0445LL\u0445\u0445LL.maxX - \u0445\u0445\u0445\u0445LL\u0445LL\u0445\u0445LL.posX + \u0445\u0445\u0445L\u0445L\u0445LL\u0445\u0445LL + 0.05, L\u0445L\u0445\u0445L\u0445LL\u0445\u0445LL.maxY - \u0445\u0445\u0445\u0445LL\u0445LL\u0445\u0445LL.posY + LLL\u0445\u0445L\u0445LL\u0445\u0445LL + 0.15, L\u0445L\u0445\u0445L\u0445LL\u0445\u0445LL.maxZ - \u0445\u0445\u0445\u0445LL\u0445LL\u0445\u0445LL.posZ + \u0445LL\u0445\u0445L\u0445LL\u0445\u0445LL + 0.05);
        GlStateManager.glLineWidth(2.0f);
        GL11.glEnable(2848);
        GlStateManager.color((float)\u0445LLL\u0445L\u0445LL\u0445\u0445LL.getRed() / 255.0f, (float)\u0445LLL\u0445L\u0445LL\u0445\u0445LL.getGreen() / 255.0f, (float)\u0445LLL\u0445L\u0445LL\u0445\u0445LL.getBlue() / 255.0f, \u0445L\u0445L\u0445L\u0445LL\u0445\u0445LL);
        if (\u0445\u0445LL\u0445L\u0445LL\u0445\u0445LL) {
            RenderHelper.drawColorBox(\u0445\u0445L\u0445\u0445L\u0445LL\u0445\u0445LL, (float)\u0445LLL\u0445L\u0445LL\u0445\u0445LL.getRed() / 255.0f, (float)\u0445LLL\u0445L\u0445LL\u0445\u0445LL.getGreen() / 255.0f, (float)\u0445LLL\u0445L\u0445LL\u0445\u0445LL.getBlue() / 255.0f, \u0445L\u0445L\u0445L\u0445LL\u0445\u0445LL);
            GlStateManager.color(0.0f, 0.0f, 0.0f, 0.5f);
        }
        RenderHelper.drawSelectionBoundingBox(\u0445\u0445L\u0445\u0445L\u0445LL\u0445\u0445LL);
        GlStateManager.glLineWidth(2.0f);
        GlStateManager.enableTexture2D();
        GL11.glEnable(2929);
        GlStateManager.depthMask(true);
        GlStateManager.disableBlend();
        GlStateManager.popMatrix();
    }

    public static void drawSelectionBoundingBox(AxisAlignedBB L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL) {
        Tessellator \u0445\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL = Tessellator.getInstance();
        BufferBuilder LLL\u0445\u0445\u0445\u0445LL\u0445\u0445LL = \u0445\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.getBuffer();
        LLL\u0445\u0445\u0445\u0445LL\u0445\u0445LL.begin(3, DefaultVertexFormats.POSITION);
        LLL\u0445\u0445\u0445\u0445LL\u0445\u0445LL.pos(L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.minX, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.minY, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.minZ).endVertex();
        LLL\u0445\u0445\u0445\u0445LL\u0445\u0445LL.pos(L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.maxX, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.minY, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.minZ).endVertex();
        LLL\u0445\u0445\u0445\u0445LL\u0445\u0445LL.pos(L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.maxX, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.minY, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.maxZ).endVertex();
        LLL\u0445\u0445\u0445\u0445LL\u0445\u0445LL.pos(L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.minX, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.minY, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.maxZ).endVertex();
        LLL\u0445\u0445\u0445\u0445LL\u0445\u0445LL.pos(L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.minX, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.minY, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.minZ).endVertex();
        \u0445\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.draw();
        LLL\u0445\u0445\u0445\u0445LL\u0445\u0445LL.begin(3, DefaultVertexFormats.POSITION);
        LLL\u0445\u0445\u0445\u0445LL\u0445\u0445LL.pos(L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.minX, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.maxY, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.minZ).endVertex();
        LLL\u0445\u0445\u0445\u0445LL\u0445\u0445LL.pos(L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.maxX, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.maxY, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.minZ).endVertex();
        LLL\u0445\u0445\u0445\u0445LL\u0445\u0445LL.pos(L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.maxX, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.maxY, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.maxZ).endVertex();
        LLL\u0445\u0445\u0445\u0445LL\u0445\u0445LL.pos(L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.minX, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.maxY, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.maxZ).endVertex();
        LLL\u0445\u0445\u0445\u0445LL\u0445\u0445LL.pos(L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.minX, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.maxY, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.minZ).endVertex();
        \u0445\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.draw();
        LLL\u0445\u0445\u0445\u0445LL\u0445\u0445LL.begin(1, DefaultVertexFormats.POSITION);
        LLL\u0445\u0445\u0445\u0445LL\u0445\u0445LL.pos(L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.minX, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.minY, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.minZ).endVertex();
        LLL\u0445\u0445\u0445\u0445LL\u0445\u0445LL.pos(L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.minX, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.maxY, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.minZ).endVertex();
        LLL\u0445\u0445\u0445\u0445LL\u0445\u0445LL.pos(L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.maxX, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.minY, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.minZ).endVertex();
        LLL\u0445\u0445\u0445\u0445LL\u0445\u0445LL.pos(L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.maxX, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.maxY, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.minZ).endVertex();
        LLL\u0445\u0445\u0445\u0445LL\u0445\u0445LL.pos(L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.maxX, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.minY, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.maxZ).endVertex();
        LLL\u0445\u0445\u0445\u0445LL\u0445\u0445LL.pos(L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.maxX, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.maxY, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.maxZ).endVertex();
        LLL\u0445\u0445\u0445\u0445LL\u0445\u0445LL.pos(L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.minX, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.minY, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.maxZ).endVertex();
        LLL\u0445\u0445\u0445\u0445LL\u0445\u0445LL.pos(L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.minX, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.maxY, L\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.maxZ).endVertex();
        \u0445\u0445\u0445L\u0445\u0445\u0445LL\u0445\u0445LL.draw();
    }

    public static void drawCircle3D(Entity \u0445LL\u0445\u0445LL\u0445L\u0445\u0445LL, double \u0445\u0445L\u0445\u0445LL\u0445L\u0445\u0445LL, float \u0445L\u0445\u0445\u0445LL\u0445L\u0445\u0445LL, int L\u0445\u0445\u0445\u0445LL\u0445L\u0445\u0445LL, float LLLLL\u0445L\u0445L\u0445\u0445LL, int L\u0445LLL\u0445L\u0445L\u0445\u0445LL) {
        GL11.glPushMatrix();
        GL11.glDisable(3553);
        GL11.glEnable(2848);
        GL11.glHint(3154, 4354);
        GL11.glDisable(2929);
        GL11.glLineWidth(LLLLL\u0445L\u0445L\u0445\u0445LL);
        GL11.glEnable(3042);
        GL11.glBlendFunc(770, 771);
        GL11.glDisable(2929);
        GL11.glBegin(3);
        double LL\u0445LL\u0445L\u0445L\u0445\u0445LL = \u0445LL\u0445\u0445LL\u0445L\u0445\u0445LL.lastTickPosX + (\u0445LL\u0445\u0445LL\u0445L\u0445\u0445LL.posX - \u0445LL\u0445\u0445LL\u0445L\u0445\u0445LL.lastTickPosX) * (double)\u0445L\u0445\u0445\u0445LL\u0445L\u0445\u0445LL - RenderHelper.mc.getRenderManager().renderPosX;
        double \u0445L\u0445LL\u0445L\u0445L\u0445\u0445LL = \u0445LL\u0445\u0445LL\u0445L\u0445\u0445LL.lastTickPosY + (\u0445LL\u0445\u0445LL\u0445L\u0445\u0445LL.posY - \u0445LL\u0445\u0445LL\u0445L\u0445\u0445LL.lastTickPosY) * (double)\u0445L\u0445\u0445\u0445LL\u0445L\u0445\u0445LL - RenderHelper.mc.getRenderManager().renderPosY;
        double \u0445\u0445\u0445LL\u0445L\u0445L\u0445\u0445LL = \u0445LL\u0445\u0445LL\u0445L\u0445\u0445LL.lastTickPosZ + (\u0445LL\u0445\u0445LL\u0445L\u0445\u0445LL.posZ - \u0445LL\u0445\u0445LL\u0445L\u0445\u0445LL.lastTickPosZ) * (double)\u0445L\u0445\u0445\u0445LL\u0445L\u0445\u0445LL - RenderHelper.mc.getRenderManager().renderPosZ;
        RenderHelper.setColor(L\u0445LLL\u0445L\u0445L\u0445\u0445LL);
        int LLL\u0445\u0445LL\u0445L\u0445\u0445LL = 0;
        if (LLL\u0445\u0445LL\u0445L\u0445\u0445LL <= L\u0445\u0445\u0445\u0445LL\u0445L\u0445\u0445LL) {
            GL11.glVertex3d(LL\u0445LL\u0445L\u0445L\u0445\u0445LL + \u0445\u0445L\u0445\u0445LL\u0445L\u0445\u0445LL * Math.cos((float)LLL\u0445\u0445LL\u0445L\u0445\u0445LL * ((float)Math.PI * 2) / (float)L\u0445\u0445\u0445\u0445LL\u0445L\u0445\u0445LL), \u0445L\u0445LL\u0445L\u0445L\u0445\u0445LL, \u0445\u0445\u0445LL\u0445L\u0445L\u0445\u0445LL + \u0445\u0445L\u0445\u0445LL\u0445L\u0445\u0445LL * Math.sin((float)LLL\u0445\u0445LL\u0445L\u0445\u0445LL * ((float)Math.PI * 2) / (float)L\u0445\u0445\u0445\u0445LL\u0445L\u0445\u0445LL));
            ++LLL\u0445\u0445LL\u0445L\u0445\u0445LL;
            return;
        }
        GL11.glEnd();
        GL11.glDepthMask(true);
        GL11.glDisable(3042);
        GL11.glEnable(2929);
        GL11.glDisable(2848);
        GL11.glEnable(2929);
        GL11.glEnable(3553);
        GL11.glPopMatrix();
    }

    public static void drawArrow(float LL\u0445LLL\u0445\u0445L\u0445\u0445LL, float \u0445L\u0445LLL\u0445\u0445L\u0445\u0445LL, boolean L\u0445\u0445LLL\u0445\u0445L\u0445\u0445LL, int \u0445\u0445\u0445LLL\u0445\u0445L\u0445\u0445LL) {
        GL11.glPushMatrix();
        GlStateManager.scale(0.8, 0.8, 1.0);
        GL11.glEnable(3042);
        GL11.glDisable(3553);
        GL11.glBlendFunc(770, 771);
        GL11.glEnable(2848);
        GL11.glDisable(3553);
        RenderHelper.setColor(\u0445\u0445\u0445LLL\u0445\u0445L\u0445\u0445LL);
        GL11.glLineWidth(2.0f);
        GL11.glBegin(1);
        GL11.glVertex2d(LL\u0445LLL\u0445\u0445L\u0445\u0445LL, \u0445L\u0445LLL\u0445\u0445L\u0445\u0445LL + (float)(L\u0445\u0445LLL\u0445\u0445L\u0445\u0445LL ? 4 : 0));
        GL11.glVertex2d(LL\u0445LLL\u0445\u0445L\u0445\u0445LL + 3.0f, \u0445L\u0445LLL\u0445\u0445L\u0445\u0445LL + (float)(L\u0445\u0445LLL\u0445\u0445L\u0445\u0445LL ? 0 : 4));
        GL11.glEnd();
        GL11.glBegin(1);
        GL11.glVertex2d(LL\u0445LLL\u0445\u0445L\u0445\u0445LL + 3.0f, \u0445L\u0445LLL\u0445\u0445L\u0445\u0445LL + (float)(L\u0445\u0445LLL\u0445\u0445L\u0445\u0445LL ? 0 : 4));
        GL11.glVertex2d(LL\u0445LLL\u0445\u0445L\u0445\u0445LL + 6.0f, \u0445L\u0445LLL\u0445\u0445L\u0445\u0445LL + (float)(L\u0445\u0445LLL\u0445\u0445L\u0445\u0445LL ? 4 : 0));
        GL11.glEnd();
        GL11.glEnable(3553);
        GL11.glDisable(2848);
        GlStateManager.scale(2.0f, 2.0f, 1.0f);
        GL11.glPopMatrix();
    }

    public static void drawImage(ResourceLocation LL\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445LL, float \u0445L\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445LL, float L\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445LL, float \u0445\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445LL, float LLLLL\u0445\u0445\u0445L\u0445\u0445LL, Color \u0445LLLL\u0445\u0445\u0445L\u0445\u0445LL) {
        ScaledResolution L\u0445LLL\u0445\u0445\u0445L\u0445\u0445LL = new ScaledResolution(Minecraft.getInstance());
        GL11.glDisable(2929);
        GL11.glEnable(3042);
        GL11.glDepthMask(false);
        OpenGlHelper.glBlendFunc(770, 771, 1, 0);
        RenderHelper.setColor(\u0445LLLL\u0445\u0445\u0445L\u0445\u0445LL.getRGB());
        Minecraft.getInstance().getTextureManager().bindTexture(LL\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445LL);
        Gui.drawModalRectWithCustomSizedTexture(\u0445L\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445LL, L\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445LL, 0.0f, 0.0f, \u0445\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445LL, LLLLL\u0445\u0445\u0445L\u0445\u0445LL, \u0445\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445LL, LLLLL\u0445\u0445\u0445L\u0445\u0445LL);
        GL11.glDepthMask(true);
        GL11.glDisable(3042);
        GL11.glEnable(2929);
    }

    public static void renderItem(ItemStack \u0445\u0445\u0445L\u0445\u0445\u0445\u0445L\u0445\u0445LL, int \u0445LL\u0445\u0445\u0445\u0445\u0445L\u0445\u0445LL, int \u0445\u0445L\u0445\u0445\u0445\u0445\u0445L\u0445\u0445LL) {
        GlStateManager.enableBlend();
        GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
        GlStateManager.enableDepth();
        net.minecraft.client.renderer.RenderHelper.enableGUIStandardItemLighting();
        mc.getRenderItem().renderItemOverlays(RenderHelper.mc.fontRendererObj, \u0445\u0445\u0445L\u0445\u0445\u0445\u0445L\u0445\u0445LL, \u0445LL\u0445\u0445\u0445\u0445\u0445L\u0445\u0445LL, \u0445\u0445L\u0445\u0445\u0445\u0445\u0445L\u0445\u0445LL);
        mc.getRenderItem().renderItemIntoGUI(\u0445\u0445\u0445L\u0445\u0445\u0445\u0445L\u0445\u0445LL, \u0445LL\u0445\u0445\u0445\u0445\u0445L\u0445\u0445LL, \u0445\u0445L\u0445\u0445\u0445\u0445\u0445L\u0445\u0445LL);
        net.minecraft.client.renderer.RenderHelper.disableStandardItemLighting();
        GlStateManager.color(1.0f, 1.0f, 1.0f, 1.0f);
        GlStateManager.disableDepth();
    }

    public static void drawCircle(float \u0445\u0445L\u0445\u0445LLL\u0445\u0445\u0445LL, float \u0445L\u0445\u0445\u0445LLL\u0445\u0445\u0445LL, float \u0445\u0445\u0445\u0445\u0445LLL\u0445\u0445\u0445LL, float \u0445LLLL\u0445LL\u0445\u0445\u0445LL, float L\u0445LLL\u0445LL\u0445\u0445\u0445LL, boolean \u0445\u0445LLL\u0445LL\u0445\u0445\u0445LL, Color LL\u0445LL\u0445LL\u0445\u0445\u0445LL) {
        GlStateManager.color(0.0f, 0.0f, 0.0f, 0.0f);
        if (\u0445\u0445\u0445\u0445\u0445LLL\u0445\u0445\u0445LL > \u0445LLLL\u0445LL\u0445\u0445\u0445LL) {
            float \u0445\u0445LL\u0445LLL\u0445\u0445\u0445LL = \u0445LLLL\u0445LL\u0445\u0445\u0445LL;
            \u0445LLLL\u0445LL\u0445\u0445\u0445LL = \u0445\u0445\u0445\u0445\u0445LLL\u0445\u0445\u0445LL;
            \u0445\u0445\u0445\u0445\u0445LLL\u0445\u0445\u0445LL = \u0445\u0445LL\u0445LLL\u0445\u0445\u0445LL;
        }
        GlStateManager.enableBlend();
        GlStateManager.disableTexture2D();
        GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
        RenderHelper.setColor(LL\u0445LL\u0445LL\u0445\u0445\u0445LL.getRGB());
        GL11.glEnable(2848);
        GL11.glLineWidth(2.0f);
        GL11.glBegin(3);
        float \u0445L\u0445LL\u0445LL\u0445\u0445\u0445LL = \u0445LLLL\u0445LL\u0445\u0445\u0445LL;
        if (\u0445L\u0445LL\u0445LL\u0445\u0445\u0445LL >= \u0445\u0445\u0445\u0445\u0445LLL\u0445\u0445\u0445LL) {
            float L\u0445\u0445L\u0445LLL\u0445\u0445\u0445LL = (float)(Math.cos((double)\u0445L\u0445LL\u0445LL\u0445\u0445\u0445LL * Math.PI / 180.0) * (double)L\u0445LLL\u0445LL\u0445\u0445\u0445LL * 1.0);
            float \u0445L\u0445L\u0445LLL\u0445\u0445\u0445LL = (float)(Math.sin((double)\u0445L\u0445LL\u0445LL\u0445\u0445\u0445LL * Math.PI / 180.0) * (double)L\u0445LLL\u0445LL\u0445\u0445\u0445LL * 1.0);
            GL11.glVertex2f(\u0445\u0445L\u0445\u0445LLL\u0445\u0445\u0445LL + L\u0445\u0445L\u0445LLL\u0445\u0445\u0445LL, \u0445L\u0445\u0445\u0445LLL\u0445\u0445\u0445LL + \u0445L\u0445L\u0445LLL\u0445\u0445\u0445LL);
            \u0445L\u0445LL\u0445LL\u0445\u0445\u0445LL -= 4.0f;
            return;
        }
        GL11.glEnd();
        GL11.glDisable(2848);
        GL11.glEnable(2848);
        GL11.glBegin(\u0445\u0445LLL\u0445LL\u0445\u0445\u0445LL ? 6 : 3);
        \u0445L\u0445LL\u0445LL\u0445\u0445\u0445LL = \u0445LLLL\u0445LL\u0445\u0445\u0445LL;
        if (\u0445L\u0445LL\u0445LL\u0445\u0445\u0445LL >= \u0445\u0445\u0445\u0445\u0445LLL\u0445\u0445\u0445LL) {
            float \u0445LL\u0445\u0445LLL\u0445\u0445\u0445LL = (float)Math.cos((double)\u0445L\u0445LL\u0445LL\u0445\u0445\u0445LL * Math.PI / 180.0) * L\u0445LLL\u0445LL\u0445\u0445\u0445LL;
            float \u0445\u0445\u0445L\u0445LLL\u0445\u0445\u0445LL = (float)Math.sin((double)\u0445L\u0445LL\u0445LL\u0445\u0445\u0445LL * Math.PI / 180.0) * L\u0445LLL\u0445LL\u0445\u0445\u0445LL;
            GL11.glVertex2f(\u0445\u0445L\u0445\u0445LLL\u0445\u0445\u0445LL + \u0445LL\u0445\u0445LLL\u0445\u0445\u0445LL, \u0445L\u0445\u0445\u0445LLL\u0445\u0445\u0445LL + \u0445\u0445\u0445L\u0445LLL\u0445\u0445\u0445LL);
            \u0445L\u0445LL\u0445LL\u0445\u0445\u0445LL -= 4.0f;
            return;
        }
        GL11.glEnd();
        GL11.glDisable(2848);
        GlStateManager.enableTexture2D();
        GlStateManager.disableBlend();
    }

    public static void drawCircle(float \u0445\u0445LLLL\u0445L\u0445\u0445\u0445LL, float LL\u0445LLL\u0445L\u0445\u0445\u0445LL, float L\u0445\u0445LLL\u0445L\u0445\u0445\u0445LL, boolean \u0445\u0445\u0445LLL\u0445L\u0445\u0445\u0445LL, Color LLL\u0445LL\u0445L\u0445\u0445\u0445LL) {
        RenderHelper.drawCircle(\u0445\u0445LLLL\u0445L\u0445\u0445\u0445LL, LL\u0445LLL\u0445L\u0445\u0445\u0445LL, 0.0f, 360.0f, L\u0445\u0445LLL\u0445L\u0445\u0445\u0445LL, \u0445\u0445\u0445LLL\u0445L\u0445\u0445\u0445LL, LLL\u0445LL\u0445L\u0445\u0445\u0445LL);
    }

    public static void drawColorBox(AxisAlignedBB \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, float \u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, float \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, float \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, float \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL) {
        Tessellator \u0445\u0445\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL = Tessellator.getInstance();
        BufferBuilder LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL = \u0445\u0445\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL.getBuffer();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.begin(7, DefaultVertexFormats.POSITION_TEX);
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        \u0445\u0445\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL.draw();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.begin(7, DefaultVertexFormats.POSITION_TEX);
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        \u0445\u0445\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL.draw();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.begin(7, DefaultVertexFormats.POSITION_TEX);
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        \u0445\u0445\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL.draw();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.begin(7, DefaultVertexFormats.POSITION_TEX);
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        \u0445\u0445\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL.draw();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.begin(7, DefaultVertexFormats.POSITION_TEX);
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        \u0445\u0445\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL.draw();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.begin(7, DefaultVertexFormats.POSITION_TEX);
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        LLL\u0445\u0445\u0445\u0445L\u0445\u0445\u0445LL.pos(\u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxX, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.minY, \u0445L\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL.maxZ).color(\u0445\u0445\u0445\u0445L\u0445\u0445L\u0445\u0445\u0445LL, \u0445LLL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445\u0445LL\u0445\u0445\u0445L\u0445\u0445\u0445LL, \u0445L\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL).endVertex();
        \u0445\u0445\u0445L\u0445\u0445\u0445L\u0445\u0445\u0445LL.draw();
    }

    public static boolean isInViewFrustum(Entity L\u0445\u0445LLLL\u0445\u0445\u0445\u0445LL) {
        return L\u0445\u0445LLLL\u0445\u0445\u0445\u0445LL.getEntityBoundingBox() == false || L\u0445\u0445LLLL\u0445\u0445\u0445\u0445LL.ignoreFrustumCheck;
    }

    public static void drawRoundedRect99(double \u0445LLL\u0445LL\u0445\u0445\u0445\u0445LL, float \u0445\u0445LL\u0445LL\u0445\u0445\u0445\u0445LL, double LL\u0445L\u0445LL\u0445\u0445\u0445\u0445LL, double L\u0445\u0445L\u0445LL\u0445\u0445\u0445\u0445LL, int LLL\u0445\u0445LL\u0445\u0445\u0445\u0445LL) {
        RenderHelper.drawRect(\u0445LLL\u0445LL\u0445\u0445\u0445\u0445LL + 0.5, \u0445\u0445LL\u0445LL\u0445\u0445\u0445\u0445LL, LL\u0445L\u0445LL\u0445\u0445\u0445\u0445LL - 0.5, \u0445\u0445LL\u0445LL\u0445\u0445\u0445\u0445LL + 0.5f, LLL\u0445\u0445LL\u0445\u0445\u0445\u0445LL);
        RenderHelper.drawRect(\u0445LLL\u0445LL\u0445\u0445\u0445\u0445LL + 0.5, L\u0445\u0445L\u0445LL\u0445\u0445\u0445\u0445LL - 0.5, LL\u0445L\u0445LL\u0445\u0445\u0445\u0445LL - 0.5, L\u0445\u0445L\u0445LL\u0445\u0445\u0445\u0445LL, LLL\u0445\u0445LL\u0445\u0445\u0445\u0445LL);
        RenderHelper.drawRect(\u0445LLL\u0445LL\u0445\u0445\u0445\u0445LL, (double)\u0445\u0445LL\u0445LL\u0445\u0445\u0445\u0445LL + 0.5, LL\u0445L\u0445LL\u0445\u0445\u0445\u0445LL, L\u0445\u0445L\u0445LL\u0445\u0445\u0445\u0445LL - 0.5, LLL\u0445\u0445LL\u0445\u0445\u0445\u0445LL);
    }

    private static void drawRect(double L\u0445LLL\u0445L\u0445\u0445\u0445\u0445LL, double \u0445\u0445LLL\u0445L\u0445\u0445\u0445\u0445LL, double LL\u0445LL\u0445L\u0445\u0445\u0445\u0445LL, double \u0445L\u0445LL\u0445L\u0445\u0445\u0445\u0445LL, int \u0445\u0445\u0445LL\u0445L\u0445\u0445\u0445\u0445LL) {
    }

    public static void blockEsp(BlockPos \u0445\u0445LLLL\u0445\u0445\u0445\u0445\u0445LL, Color \u0445L\u0445LLL\u0445\u0445\u0445\u0445\u0445LL, boolean \u0445\u0445\u0445LLL\u0445\u0445\u0445\u0445\u0445LL) {
        double \u0445LL\u0445LL\u0445\u0445\u0445\u0445\u0445LL = (double)\u0445\u0445LLLL\u0445\u0445\u0445\u0445\u0445LL.getX() - RenderHelper.mc.getRenderManager().renderPosX;
        double \u0445\u0445L\u0445LL\u0445\u0445\u0445\u0445\u0445LL = (double)\u0445\u0445LLLL\u0445\u0445\u0445\u0445\u0445LL.getY() - RenderHelper.mc.getRenderManager().renderPosY;
        double LL\u0445\u0445LL\u0445\u0445\u0445\u0445\u0445LL = (double)\u0445\u0445LLLL\u0445\u0445\u0445\u0445\u0445LL.getZ() - RenderHelper.mc.getRenderManager().renderPosZ;
        GL11.glPushMatrix();
        GL11.glBlendFunc(770, 771);
        GL11.glEnable(3042);
        GL11.glLineWidth(2.0f);
        GL11.glDisable(3553);
        GL11.glDisable(2929);
        GL11.glDepthMask(false);
        GlStateManager.color((float)\u0445L\u0445LLL\u0445\u0445\u0445\u0445\u0445LL.getRed() / 255.0f, (float)\u0445L\u0445LLL\u0445\u0445\u0445\u0445\u0445LL.getGreen() / 255.0f, (float)\u0445L\u0445LLL\u0445\u0445\u0445\u0445\u0445LL.getBlue() / 255.0f, 0.15f);
        RenderHelper.drawColorBox(new AxisAlignedBB(\u0445LL\u0445LL\u0445\u0445\u0445\u0445\u0445LL, \u0445\u0445L\u0445LL\u0445\u0445\u0445\u0445\u0445LL, LL\u0445\u0445LL\u0445\u0445\u0445\u0445\u0445LL, \u0445LL\u0445LL\u0445\u0445\u0445\u0445\u0445LL + 1.0, \u0445\u0445L\u0445LL\u0445\u0445\u0445\u0445\u0445LL + 1.0, LL\u0445\u0445LL\u0445\u0445\u0445\u0445\u0445LL + 1.0), 0.0f, 0.0f, 0.0f, 0.0f);
        if (\u0445\u0445\u0445LLL\u0445\u0445\u0445\u0445\u0445LL) {
            GlStateManager.color(0.0f, 0.0f, 0.0f, 0.5f);
            RenderHelper.drawSelectionBoundingBox(new AxisAlignedBB(\u0445LL\u0445LL\u0445\u0445\u0445\u0445\u0445LL, \u0445\u0445L\u0445LL\u0445\u0445\u0445\u0445\u0445LL, LL\u0445\u0445LL\u0445\u0445\u0445\u0445\u0445LL, \u0445LL\u0445LL\u0445\u0445\u0445\u0445\u0445LL + 1.0, \u0445\u0445L\u0445LL\u0445\u0445\u0445\u0445\u0445LL + 1.0, LL\u0445\u0445LL\u0445\u0445\u0445\u0445\u0445LL + 1.0));
        }
        GL11.glLineWidth(2.0f);
        GL11.glEnable(3553);
        GL11.glEnable(2929);
        GL11.glDepthMask(true);
        GL11.glDisable(3042);
        GL11.glPopMatrix();
    }

    public static void blockEspFrame(BlockPos \u0445L\u0445LL\u0445\u0445\u0445\u0445\u0445\u0445LL, float \u0445\u0445\u0445LL\u0445\u0445\u0445\u0445\u0445\u0445LL, float \u0445LL\u0445L\u0445\u0445\u0445\u0445\u0445\u0445LL, float \u0445\u0445L\u0445L\u0445\u0445\u0445\u0445\u0445\u0445LL) {
        double \u0445L\u0445L\u0445L\u0445\u0445\u0445\u0445L\u0445L = (double)\u0445L\u0445LL\u0445\u0445\u0445\u0445\u0445\u0445LL.getX() - RenderHelper.mc.getRenderManager().renderPosX;
        double LLL\u0445\u0445L\u0445\u0445\u0445\u0445L\u0445L = (double)\u0445L\u0445LL\u0445\u0445\u0445\u0445\u0445\u0445LL.getY() - RenderHelper.mc.getRenderManager().renderPosY;
        double \u0445\u0445L\u0445\u0445L\u0445\u0445\u0445\u0445L\u0445L = (double)\u0445L\u0445LL\u0445\u0445\u0445\u0445\u0445\u0445LL.getZ() - RenderHelper.mc.getRenderManager().renderPosZ;
        GL11.glBlendFunc(770, 771);
        GL11.glEnable(3042);
        GL11.glLineWidth(2.0f);
        GL11.glDisable(3553);
        GL11.glDisable(2929);
        GL11.glDepthMask(false);
        GlStateManager.color(\u0445\u0445\u0445LL\u0445\u0445\u0445\u0445\u0445\u0445LL, \u0445LL\u0445L\u0445\u0445\u0445\u0445\u0445\u0445LL, \u0445\u0445L\u0445L\u0445\u0445\u0445\u0445\u0445\u0445LL, 1.0f);
        RenderHelper.drawSelectionBoundingBox(new AxisAlignedBB(\u0445L\u0445L\u0445L\u0445\u0445\u0445\u0445L\u0445L, LLL\u0445\u0445L\u0445\u0445\u0445\u0445L\u0445L, \u0445\u0445L\u0445\u0445L\u0445\u0445\u0445\u0445L\u0445L, \u0445L\u0445L\u0445L\u0445\u0445\u0445\u0445L\u0445L + 1.0, LLL\u0445\u0445L\u0445\u0445\u0445\u0445L\u0445L + 1.0, \u0445\u0445L\u0445\u0445L\u0445\u0445\u0445\u0445L\u0445L + 1.0));
        GL11.glEnable(3553);
        GL11.glEnable(2929);
        GL11.glDepthMask(true);
        GL11.glDisable(3042);
    }

    public static void drawTriangle(float \u0445\u0445\u0445\u0445LLLLLL\u0445\u0445L, float \u0445LLL\u0445LLLLL\u0445\u0445L, float L\u0445LL\u0445LLLLL\u0445\u0445L, float \u0445\u0445LL\u0445LLLLL\u0445\u0445L, int \u0445L\u0445L\u0445LLLLL\u0445\u0445L) {
        GlStateManager.translate(\u0445\u0445\u0445\u0445LLLLLL\u0445\u0445L, \u0445LLL\u0445LLLLL\u0445\u0445L, 0.0f);
        GlStateManager.rotate(180.0f + \u0445\u0445LL\u0445LLLLL\u0445\u0445L, 0.0f, 0.0f, 1.0f);
        RenderHelper.setColor(\u0445L\u0445L\u0445LLLLL\u0445\u0445L);
        GlStateManager.enable(3042);
        GlStateManager.disable(3553);
        GlStateManager.enable(2848);
        GlStateManager.hint(3154, 4354);
        GlStateManager.blendFunc(770, 771);
        GlStateManager.glLineWidth(1.0f);
        GlStateManager.glBegin(6);
        GlStateManager.glVertex2f(0.0f, L\u0445LL\u0445LLLLL\u0445\u0445L);
        GlStateManager.glVertex2f(1.0f * L\u0445LL\u0445LLLLL\u0445\u0445L, -L\u0445LL\u0445LLLLL\u0445\u0445L);
        GlStateManager.glVertex2f(-(1.0f * L\u0445LL\u0445LLLLL\u0445\u0445L), -L\u0445LL\u0445LLLLL\u0445\u0445L);
        GlStateManager.glEnd();
        GlStateManager.glLineWidth(3.0f);
        GlStateManager.glBegin(2);
        RenderHelper.setColor(new Color(\u0445L\u0445L\u0445LLLLL\u0445\u0445L).darker().getRGB());
        GlStateManager.glVertex2f(0.0f, L\u0445LL\u0445LLLLL\u0445\u0445L);
        GlStateManager.glVertex2f(1.0f * L\u0445LL\u0445LLLLL\u0445\u0445L, -L\u0445LL\u0445LLLLL\u0445\u0445L);
        GlStateManager.glVertex2f(-(1.0f * L\u0445LL\u0445LLLLL\u0445\u0445L), -L\u0445LL\u0445LLLLL\u0445\u0445L);
        GlStateManager.glEnd();
        GlStateManager.disable(2848);
        GlStateManager.enable(3553);
        GlStateManager.disable(3042);
        GlStateManager.resetColor();
        GlStateManager.rotate(-180.0f - \u0445\u0445LL\u0445LLLLL\u0445\u0445L, 0.0f, 0.0f, 1.0f);
        GlStateManager.translate(-\u0445\u0445\u0445\u0445LLLLLL\u0445\u0445L, -\u0445LLL\u0445LLLLL\u0445\u0445L, 0.0f);
    }
}

